"use strict";
exports.id = 617;
exports.ids = [617];
exports.modules = {

/***/ 5617:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => (/* binding */ addCollection),
/* harmony export */   "b": () => (/* binding */ getCollections)
/* harmony export */ });
/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8491);
/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_parser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_traverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7459);
/* harmony import */ var _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_traverse__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3022);
/* harmony import */ var _babel_generator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_generator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1130);
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7147);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);





/**
 * Creates AST subtree for a chunk collection
 * @param collection object representing chunk collection
 * @returns object expression node for chunk collection
 */ const createCollection = (collection)=>{
    const { name , description , chunks  } = collection;
    const nameProperty = _babel_types__WEBPACK_IMPORTED_MODULE_3__.objectProperty(_babel_types__WEBPACK_IMPORTED_MODULE_3__.identifier("name"), _babel_types__WEBPACK_IMPORTED_MODULE_3__.stringLiteral(name));
    const descriptionProperty = _babel_types__WEBPACK_IMPORTED_MODULE_3__.objectProperty(_babel_types__WEBPACK_IMPORTED_MODULE_3__.identifier("description"), _babel_types__WEBPACK_IMPORTED_MODULE_3__.stringLiteral(description));
    const chunksProperty = _babel_types__WEBPACK_IMPORTED_MODULE_3__.objectProperty(_babel_types__WEBPACK_IMPORTED_MODULE_3__.identifier("chunks"), _babel_types__WEBPACK_IMPORTED_MODULE_3__.arrayExpression(chunks.map((chunk)=>{
        return _babel_types__WEBPACK_IMPORTED_MODULE_3__.stringLiteral(chunk);
    })));
    return _babel_types__WEBPACK_IMPORTED_MODULE_3__.objectExpression([
        nameProperty,
        descriptionProperty,
        chunksProperty
    ]);
};
/**
 * Updates a particular chunk collection in configuration file
 * Assumes, name as key for updation.
 * @param configPath path to the configuration of the user
 * @param collection object with the new value for the given collection
 */ const updateCollection = (configPath, collection)=>{
    const sourceCode = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(configPath).toString();
    const ast = _babel_parser__WEBPACK_IMPORTED_MODULE_0__.parse(sourceCode, {
        sourceType: "module"
    });
    _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default()(ast, {
        AssignmentExpression (path) {
            var ref, ref1, ref2, ref3;
            const node = path.node;
            const isLeftModuleExports = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isMemberExpression(node.left) && ((ref = node.left) === null || ref === void 0 ? void 0 : (ref1 = ref.object) === null || ref1 === void 0 ? void 0 : ref1.name) === "module" && ((ref2 = node.left) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.property) === null || ref3 === void 0 ? void 0 : ref3.name) === "exports";
            const isRightObjectExpression = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isObjectExpression(node.right);
            if (!(isLeftModuleExports && isRightObjectExpression)) {
                return;
            }
            const collectionProperty = node.right.properties.filter((property)=>{
                return property.key.name === "collections";
            });
            if (collectionProperty.length === 1) {
                if (!_babel_types__WEBPACK_IMPORTED_MODULE_3__.isArrayExpression(collectionProperty[0].value)) {
                    throw Error("Collections value should be array");
                }
                const collections = collectionProperty[0].value.elements;
                collectionProperty[0].value.elements = collections.map((collectionNode)=>{
                    const nameOfCollectionNode = collectionNode.properties.reduce((value, prop)=>{
                        if (prop.key.name === "name") {
                            return prop.value.value;
                        }
                        return value;
                    }, "");
                    if (nameOfCollectionNode === collection.name) {
                        return createCollection(collection);
                    }
                    return collectionNode;
                });
            }
        }
    });
    const transformedCode = _babel_generator__WEBPACK_IMPORTED_MODULE_2___default()(ast, {}, sourceCode).code;
    (0,fs__WEBPACK_IMPORTED_MODULE_4__.writeFileSync)(configPath, transformedCode);
};
/**
 * Adds a new collection to the configuration file.
 * If collection with given name exists, it updates the collection in configuration itself.
 * @param configPath path to the configuration file
 * @param collection object representing a chunk collection
 */ const addCollection = (configPath, collection)=>{
    if (!(0,fs__WEBPACK_IMPORTED_MODULE_4__.existsSync)(configPath)) {
        (0,fs__WEBPACK_IMPORTED_MODULE_4__.writeFileSync)(configPath, `module.exports = {}`);
    }
    const currentCollections = getCollections(configPath);
    const currentCollectionNames = currentCollections.map((currCollection)=>currCollection.name
    );
    // Assuming name of the collection as unique identifier
    if (currentCollectionNames.includes(collection.name)) {
        updateCollection(configPath, collection);
        return;
    }
    const sourceCode = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(configPath).toString();
    const ast = _babel_parser__WEBPACK_IMPORTED_MODULE_0__.parse(sourceCode, {
        sourceType: "module"
    });
    const collectionNode = createCollection(collection);
    _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default()(ast, {
        AssignmentExpression (path) {
            var ref, ref4, ref5, ref6;
            const node = path.node;
            const isLeftModuleExports = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isMemberExpression(node.left) && ((ref = node.left) === null || ref === void 0 ? void 0 : (ref4 = ref.object) === null || ref4 === void 0 ? void 0 : ref4.name) === "module" && ((ref5 = node.left) === null || ref5 === void 0 ? void 0 : (ref6 = ref5.property) === null || ref6 === void 0 ? void 0 : ref6.name) === "exports";
            const isRightObjectExpression = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isObjectExpression(node.right);
            if (!(isLeftModuleExports && isRightObjectExpression)) {
                return;
            }
            const collectionProperty = node.right.properties.filter((property)=>{
                return property.key.name === "collections";
            });
            if (collectionProperty.length === 1) {
                if (!_babel_types__WEBPACK_IMPORTED_MODULE_3__.isArrayExpression(collectionProperty[0].value)) {
                    throw Error("Collections value should be array");
                }
                collectionProperty[0].value.elements.push(collectionNode);
            } else {
                node.right.properties.push(_babel_types__WEBPACK_IMPORTED_MODULE_3__.objectProperty(_babel_types__WEBPACK_IMPORTED_MODULE_3__.identifier("collections"), _babel_types__WEBPACK_IMPORTED_MODULE_3__.arrayExpression([
                    collectionNode
                ])));
            }
        }
    });
    const transformedCode = _babel_generator__WEBPACK_IMPORTED_MODULE_2___default()(ast, {}, sourceCode).code;
    (0,fs__WEBPACK_IMPORTED_MODULE_4__.writeFileSync)(configPath, transformedCode);
};
/**
 * Lists all collections stored in configuration file
 * @param configPath path to the configuration file
 * @returns all chunk collections in the configuration file
 */ const getCollections = (configPath)=>{
    if (!(0,fs__WEBPACK_IMPORTED_MODULE_4__.existsSync)(configPath)) {
        return [];
    }
    const sourceCode = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(configPath).toString();
    const ast = _babel_parser__WEBPACK_IMPORTED_MODULE_0__.parse(sourceCode, {
        sourceType: "module"
    });
    let collections = [];
    _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default()(ast, {
        AssignmentExpression (path) {
            var ref, ref7, ref8, ref9;
            const node = path.node;
            const isLeftModuleExports = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isMemberExpression(node.left) && ((ref = node.left) === null || ref === void 0 ? void 0 : (ref7 = ref.object) === null || ref7 === void 0 ? void 0 : ref7.name) === "module" && ((ref8 = node.left) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.property) === null || ref9 === void 0 ? void 0 : ref9.name) === "exports";
            const isRightObjectExpression = _babel_types__WEBPACK_IMPORTED_MODULE_3__.isObjectExpression(node.right);
            if (!(isLeftModuleExports && isRightObjectExpression)) {
                return;
            }
            const collectionProperty1 = node.right.properties.filter((property)=>{
                return property.key.name === "collections";
            });
            if (collectionProperty1.length === 1) {
                if (!_babel_types__WEBPACK_IMPORTED_MODULE_3__.isArrayExpression(collectionProperty1[0].value)) {
                    throw Error("Collections value should be an array");
                }
                collections = collectionProperty1[0].value.elements.map((collectionNode)=>{
                    const collection = {};
                    collectionNode.properties.forEach((collectionProperty)=>{
                        if (_babel_types__WEBPACK_IMPORTED_MODULE_3__.isStringLiteral(collectionProperty.value)) {
                            collection[collectionProperty.key.name] = collectionProperty.value.value;
                        } else if (_babel_types__WEBPACK_IMPORTED_MODULE_3__.isArrayExpression(collectionProperty.value)) {
                            collection[collectionProperty.key.name] = collectionProperty.value.elements.map((element)=>{
                                return element.value;
                            });
                        }
                    });
                    return collection;
                });
            } else {
                collections = [];
            }
        }
    });
    return collections;
};



/***/ })

};
;