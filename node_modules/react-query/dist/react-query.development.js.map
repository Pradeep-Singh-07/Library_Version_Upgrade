{"version":3,"file":"react-query.development.js","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useMutation.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import type { Query, FetchMoreOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKeyObject =\n  | object\n  | { [key: string]: QueryKey }\n  | { [key: number]: QueryKey }\n\nexport type QueryKeyPrimitive = string | boolean | number | null | undefined\n\nexport type QueryKeyWithoutObjectAndArray = QueryKeyPrimitive\n\nexport type QueryKeyWithoutObject =\n  | QueryKeyWithoutObjectAndArray\n  | readonly QueryKey[]\n\nexport type QueryKeyWithoutArray =\n  | QueryKeyWithoutObjectAndArray\n  | QueryKeyObject\n\nexport type QueryKey = QueryKeyWithoutObject | QueryKeyObject\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\n// The tuple variants are only to infer types in the public API\nexport type TupleQueryKey = readonly [QueryKey, ...QueryKey[]]\n\nexport type TupleQueryFunction<TResult, TKey extends TupleQueryKey> = (\n  ...args: TKey\n) => TResult | Promise<TResult>\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TResult>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n}\n\nexport interface QueryObserverConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError> {\n  getFetchMore: (lastPage: TResult, allPages: TResult[]) => unknown\n}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: () => Promise<void>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport const globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport function noop(): void {\n  return void 0\n}\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible, Console } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type { Query, QueryState, Action, FetchMoreOptions } from './query'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateRefetchInterval()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(preventGC?: boolean): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearRefetchInterval()\n    this.currentQuery.unsubscribeObserver(this, preventGC)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateRefetchInterval()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(): Promise<void> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.refetch()\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetchMore(fetchMoreVariable, options)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetch().catch(error => {\n      Console.error(error)\n      return undefined\n    })\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, previousResult, config } = this\n\n    const {\n      canFetchMore,\n      error,\n      failureCount,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isLoading,\n      isStale,\n    } = currentQuery.state\n\n    let { data, status, updatedAt } = currentQuery.state\n\n    // Keep previous data if needed\n    if (config.keepPreviousData && isLoading && previousResult?.isSuccess) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore,\n      clear: this.clear,\n      data,\n      error,\n      failureCount,\n      fetchMore: this.fetchMore,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config = prevQuery\n      ? { ...this.config, initialData: undefined }\n      : this.config\n\n    const newQuery = config.queryCache!.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    this.currentResult = this.createResult()\n\n    const { data, error, isSuccess, isError } = this.currentResult\n\n    if (action.type === 'Success' && isSuccess) {\n      this.config.onSuccess?.(data!)\n      this.config.onSettled?.(data!, null)\n      this.updateRefetchInterval()\n    } else if (action.type === 'Error' && isError) {\n      this.config.onError?.(error!)\n      this.config.onSettled?.(undefined, error!)\n      this.updateRefetchInterval()\n    }\n\n    this.updateListener?.(this.currentResult)\n  }\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  noop,\n  Console,\n  getStatusProps,\n  Updater,\n  replaceEqualDeep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InfiniteQueryConfig,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n  SetState = 'SetState',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  cancelled: boolean\n  error: TError\n}\n\ninterface SetStateAction<TResult, TError> {\n  type: ActionType.SetState\n  updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SetStateAction<TResult, TError>\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  shouldContinueRetryOnFocus?: boolean\n  promise?: Promise<TResult | undefined>\n\n  private fetchMoreVariable?: unknown\n  private pageVariables?: ArrayQueryKey[]\n  private cacheTimeout?: number\n  private retryTimeout?: number\n  private staleTimeout?: number\n  private cancelPromises?: () => void\n  private cancelled?: typeof cancelledError | null\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n\n    if (init.config.infinite) {\n      const infiniteConfig = init.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n\n      if (typeof infiniteData !== 'undefined') {\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          infiniteData[infiniteData.length - 1],\n          infiniteData\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n      }\n\n      // Here we seed the pageVariables for the query\n      if (!this.pageVariables) {\n        this.pageVariables = [[...this.queryKey]]\n      }\n    }\n\n    // If the query started with data, schedule\n    // a stale timeout\n    if (!isServer && this.state.data) {\n      this.scheduleStaleTimeout()\n\n      // Simulate a query healing process\n      this.heal()\n\n      // Schedule for garbage collection in case\n      // nothing subscribes to this query\n      this.scheduleGarbageCollection()\n    }\n  }\n\n  updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n    this.observers.forEach(d => d.onQueryUpdate(this.state, action))\n    this.notifyGlobalListeners(this)\n  }\n\n  scheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (this.state.isStale || this.config.staleTime === Infinity) {\n      return\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, this.config.staleTime)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  scheduleGarbageCollection(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearCacheTimeout()\n\n    if (this.config.cacheTime === Infinity) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(\n      () => {\n        this.clear()\n      },\n      typeof this.state.data === 'undefined' &&\n        this.state.status !== QueryStatus.Error\n        ? 0\n        : this.config.cacheTime\n    )\n  }\n\n  async refetch(): Promise<void> {\n    try {\n      await this.fetch()\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  heal(): void {\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n\n    // Mark the query as not cancelled\n    this.cancelled = null\n  }\n\n  cancel(): void {\n    this.cancelled = cancelledError\n\n    if (this.cancelPromises) {\n      this.cancelPromises()\n    }\n\n    delete this.promise\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearRefetchInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  private clearRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout)\n      this.retryTimeout = undefined\n    }\n  }\n\n  private setState(\n    updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n  ): void {\n    this.dispatch({ type: ActionType.SetState, updater })\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data\n    data = replaceEqualDeep(prevData, data)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    const isStale = this.config.staleTime === 0\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      isStale,\n    })\n\n    if (!isStale) {\n      // Schedule a fresh invalidation!\n      this.scheduleStaleTimeout()\n    }\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearRetryTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  shouldRefetchOnWindowFocus(): boolean {\n    return (\n      this.isEnabled() &&\n      this.state.isStale &&\n      this.observers.some(observer => observer.config.refetchOnWindowFocus)\n    )\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n    this.heal()\n  }\n\n  unsubscribeObserver(\n    observer: QueryObserver<TResult, TError>,\n    preventGC?: boolean\n  ): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      this.cancel()\n\n      if (!preventGC) {\n        // Schedule garbage collection\n        this.scheduleGarbageCollection()\n      }\n    }\n  }\n\n  // Set up the core fetcher function\n  private async tryFetchData(\n    fn: QueryFunction<TResult>,\n    args: ArrayQueryKey\n  ): Promise<TResult> {\n    try {\n      // Perform the query\n      const filter = this.config.queryFnParamsFilter\n      const params = filter ? filter(args) : args\n\n      // Perform the query\n      const promiseOrValue = fn(...params)\n\n      this.cancelPromises = () => (promiseOrValue as any)?.cancel?.()\n\n      const data = await promiseOrValue\n      delete this.shouldContinueRetryOnFocus\n\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      return data\n    } catch (error) {\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      // Do we need to retry the request?\n      if (\n        this.config.retry === true ||\n        this.state.failureCount < this.config.retry! ||\n        (typeof this.config.retry === 'function' &&\n          this.config.retry(this.state.failureCount, error))\n      ) {\n        // If we retry, increase the failureCount\n        this.dispatch({ type: ActionType.Failed })\n\n        // Only retry if the document is visible\n        if (!isDocumentVisible()) {\n          // set this flag to continue retries on focus\n          this.shouldContinueRetryOnFocus = true\n          // Resolve a\n          return new Promise(noop)\n        }\n\n        delete this.shouldContinueRetryOnFocus\n\n        // Determine the retryDelay\n        const delay = functionalUpdate(\n          this.config.retryDelay,\n          this.state.failureCount\n        )\n\n        // Return a new promise with the retry\n        return await new Promise((resolve, reject) => {\n          // Keep track of the retry timeout\n          this.retryTimeout = setTimeout(async () => {\n            if (this.cancelled) return reject(this.cancelled)\n\n            try {\n              const data = await this.tryFetchData(fn, args)\n              if (this.cancelled) return reject(this.cancelled)\n              resolve(data)\n            } catch (error) {\n              if (this.cancelled) return reject(this.cancelled)\n              reject(error)\n            }\n          }, delay)\n        })\n      }\n\n      throw error\n    }\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    let queryFn = this.config.queryFn\n\n    if (!queryFn) {\n      return\n    }\n\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    if (this.config.infinite) {\n      const infiniteConfig = this.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n      const fetchMore = options?.fetchMore\n\n      const originalQueryFn = queryFn\n\n      queryFn = async () => {\n        const data: TResult[] = []\n        const pageVariables = this.pageVariables ? [...this.pageVariables] : []\n        const rebuiltPageVariables: ArrayQueryKey[] = []\n\n        do {\n          const args = pageVariables.shift()!\n\n          if (!data.length) {\n            // the first page query doesn't need to be rebuilt\n            data.push(await originalQueryFn(...args))\n            rebuiltPageVariables.push(args)\n          } else {\n            // get an up-to-date cursor based on the previous data set\n\n            const nextCursor = infiniteConfig.getFetchMore(\n              data[data.length - 1],\n              data\n            )\n\n            // break early if there's no next cursor\n            // otherwise we'll start from the beginning\n            // which will cause unwanted duplication\n            if (!nextCursor) {\n              break\n            }\n\n            const pageArgs = [\n              // remove the last argument (the previously saved cursor)\n              ...args.slice(0, -1),\n              nextCursor,\n            ] as ArrayQueryKey\n\n            data.push(await originalQueryFn(...pageArgs))\n            rebuiltPageVariables.push(pageArgs)\n          }\n        } while (pageVariables.length)\n\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          data[data.length - 1],\n          data\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n        this.pageVariables = rebuiltPageVariables\n\n        return (data as unknown) as TResult\n      }\n\n      if (fetchMore) {\n        queryFn = async (...args: ArrayQueryKey) => {\n          try {\n            const { fetchMoreVariable, previous } = fetchMore\n\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: previous ? 'previous' : 'next',\n            }))\n\n            const newArgs = [...args, fetchMoreVariable] as ArrayQueryKey\n\n            if (this.pageVariables) {\n              this.pageVariables[previous ? 'unshift' : 'push'](newArgs)\n            } else {\n              this.pageVariables = [newArgs]\n            }\n\n            const newData = await originalQueryFn(...newArgs)\n\n            let data\n\n            if (!infiniteData) {\n              data = [newData]\n            } else if (previous) {\n              data = [newData, ...infiniteData]\n            } else {\n              data = [...infiniteData, newData]\n            }\n\n            this.fetchMoreVariable = infiniteConfig.getFetchMore(newData, data)\n            this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n\n            return (data as unknown) as TResult\n          } finally {\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: false,\n            }))\n          }\n        }\n      }\n    }\n\n    this.promise = (async () => {\n      // If there are any retries pending for this query, kill them\n      this.cancelled = null\n\n      try {\n        // Set to fetching state if not already in it\n        if (!this.state.isFetching) {\n          this.dispatch({ type: ActionType.Fetch })\n        }\n\n        // Try to get the data\n        const data = await this.tryFetchData(queryFn!, this.queryKey)\n\n        this.setData(data)\n\n        delete this.promise\n\n        return data\n      } catch (error) {\n        this.dispatch({\n          type: ActionType.Error,\n          cancelled: error === this.cancelled,\n          error,\n        })\n\n        delete this.promise\n\n        if (error !== this.cancelled) {\n          throw error\n        }\n\n        return\n      }\n    })()\n\n    return this.promise\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable ?? this.fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          ...getStatusProps(QueryStatus.Error),\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case ActionType.SetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      return state\n  }\n}\n","import {\n  isServer,\n  getQueryArgs,\n  deepIncludes,\n  Console,\n  isObject,\n  Updater,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutObject,\n  ReactQueryConfig,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.observers.length) {\n            if (refetchActive && query.isEnabled()) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.updateConfig(config)\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n\n        if (isServer) {\n          this.notifyGlobalListeners()\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            this.notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with config and optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    config: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n    config: PrefetchQueryObjectConfig<TResult, TError, [TKey]>\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    config: PrefetchQueryObjectConfig<TResult, TError, TKey>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    try {\n      const query = this.buildQuery<TResult, TError>(\n        queryKey,\n        configWithoutRetry\n      )\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (options?.throwOnError) {\n        throw err\n      }\n      Console.error(err)\n      return\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    let query = this.getQuery<TResult, TError>(queryKey)\n\n    if (!query) {\n      query = this.buildQuery<TResult, TError>(queryKey, config)\n    }\n\n    query.setData(updater)\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\ntype FocusHandler = () => void\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus: FocusHandler = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.shouldRefetchOnWindowFocus()) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return true\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler: (() => void) | void\n\nexport function setFocusHandler(callback: (callback: FocusHandler) => void) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler((handleFocus: FocusHandler) => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n  return\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { uid, isServer } from '../core/utils'\n\nexport function useUid(): number {\n  const ref = React.useRef(0)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const mounted = React.useRef(false)\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return (React.useCallback(\n    (...args: any[]) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  ) as any) as T\n}\n\nexport function useRerenderer() {\n  const rerender = useMountedCallback(React.useState<unknown>()[1])\n  return React.useCallback(() => rerender({}), [rerender])\n}\n","import React from 'react'\n\nimport { useRerenderer, useGetLatest } from './utils'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n  const rerender = useRerenderer()\n  const isFetching = queryCache.isFetching\n\n  const getIsFetching = useGetLatest(isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(newCache => {\n        if (getIsFetching() !== newCache.isFetching) {\n          rerender()\n        }\n      }),\n    [getIsFetching, queryCache, rerender]\n  )\n\n  return isFetching\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        Promise.resolve().then(rerender)\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      observer.subscribe()\n      throw observer.fetch().finally(() => {\n        observer.unsubscribe(true)\n      })\n    }\n  }\n\n  return result\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  QueryResult,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, [TKey]>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n  queryKey: TKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n  config: UseQueryObjectConfig<TResult, TError, [TKey]>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseQueryObjectConfig<TResult, TError, TKey>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, [TKey]>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, TKey>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    ...config,\n    keepPreviousData: true,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData:\n      result.query.state.data === result.data ? result.data : undefined,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, [TKey]>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, TKey>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n"],"names":["QueryStatus","_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","deepIncludes","a","b","some","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","replaceEqualDeep","array","Array","isArray","isPlainObject","aSize","length","bItems","bSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","getStatusProps","status","isLoading","Loading","isSuccess","Success","isError","isIdle","Idle","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_CONFIG","queries","queryKeySerializerFn","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchOnMount","mergeReactQueryConfigs","shared","mutations","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","getDefaultedMutationConfig","QueryObserver","clear","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","optionalFetch","updateRefetchInterval","unsubscribe","preventGC","clearRefetchInterval","unsubscribeObserver","updateConfig","prevConfig","updated","refetchInterval","refetchIntervalInBackground","getCurrentResult","currentResult","fetchMoreVariable","fetch","catch","suspense","isFetched","isStale","observers","Infinity","refetchIntervalId","setInterval","clearInterval","createResult","previousResult","state","canFetchMore","failureCount","isFetching","isFetchingMore","data","updatedAt","keepPreviousData","query","prevQuery","initialData","newQuery","queryCache","buildQuery","onQueryUpdate","_state","action","type","onSuccess","onSettled","onError","direct","then","Promise","resolve","body","recover","e","f","arguments","apply","reject","pact","s","v","observer","onFulfilled","onRejected","callback","_this","thenable","test","awaitBody","shouldContinue","_resumeAfterBody","_resumeAfterTest","thrown","finalizer","ActionType","Query","init","notifyGlobalListeners","getDefaultState","infinite","infiniteConfig","infiniteData","getFetchMore","Boolean","pageVariables","scheduleStaleTimeout","heal","scheduleGarbageCollection","dispatch","queryReducer","forEach","d","clearStaleTimeout","staleTimeout","setTimeout","invalidate","MarkStale","clearCacheTimeout","cacheTimeout","cancelled","cancel","cancelPromises","promise","clearTimersObservers","clearTimeout","clearRetryTimeout","retryTimeout","setState","SetState","setData","prevData","isDataEqual","isEnabled","shouldRefetchOnWindowFocus","push","filter","x","tryFetchData","fn","queryFnParamsFilter","params","promiseOrValue","shouldContinueRetryOnFocus","Failed","delay","originalQueryFn","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","previous","old","newArgs","newData","Fetch","hasInitialData","initialStale","initialStatus","Date","now","throwInErrorBoundary","QueryCache","globalListeners","values","acc","getDefaultConfig","defaultConfig","splice","indexOf","notify","getQueries","predicate","predicateFn","exact","getQuery","getQueryData","removeQueries","cancelQueries","invalidateQueries","refetchActive","refetchInactive","throwOnError","all","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","visibilityChangeEvent","focusEvent","onWindowFocus","removePreviousHandler","setFocusHandler","handleFocus","addEventListener","removeEventListener","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","useGetLatest","obj","ref","useRef","current","useCallback","useMountedCallback","mounted","useRerenderer","rerender","useState","useIsFetching","getIsFetching","newCache","useDefaultedMutationConfig","contextQueryCache","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","isLatest","snapshotValue","onMutate","reset","useErrorBoundary","useDefaultedQueryConfig","useBaseQuery","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}