/**
 * @public
 * Factory function to create {@link ShakrEditor} instance
 */
export declare function createShakrEditor(options: ShakrEditorOptions): Promise<ShakrEditor>;

/**
 * @public
 * Factory function to create {@link ShakrreadyEditor} instance
 */
export declare function createShakrreadyEditor(options: ShakrreadyEditorOptions): Promise<ShakrreadyEditor>;

/**
 * Event Emitter extended by {@link ShakrEditor}
 *
 * @public
 */
export declare class EventEmitter<T extends {
    [key: string]: any;
}> {
    private _listeners;
    /**
     * Add an event listener to the Event Emiiter
     *
     * @param type - type of an event listener to add
     * @param listener - event listener callback function
     */
    on<K extends keyof T>(type: K, listener: (this: this, event: T[K]) => void): this;
    /**
     * Remove an event listener from the Event Emiiter
     *
     * @param type - type of an event listener to remove
     * @param listener - event listener callback function to remove, if this is not specified, it will remove all listeners for passed type.
     */
    off<K extends keyof T>(type: K, listener?: (this: this, event: T[K]) => void): this;
    /* Excluded from this release type: _emit */
}

/**
 * @public
 * Shakr Editor class which returns a instance that can
 * communicates with Shakr's Editor iframe window.
 */
export declare class ShakrEditor extends EventEmitter<ShakrEditorEventMap> {
    /**
     * Show object id which is used to open Shakr Editor.
     * See {@link ShakrEditorOptions.show_id} for details.
     */
    show_id: string | null;
    /**
     * Render Session object id which is used to open Shakr Editor.
     * See {@link ShakrEditorOptions.render_session_id} for details.
     */
    render_session_id: string | null;
    /**
     * Whether Shakr Editor is opened or not.
     */
    is_open: boolean;
    private _access_token;
    private _api_url;
    private _sdk_id;
    private _url;
    private _media_libraries;
    private _default_media_libraries;
    private _wrapper;
    private _iframe;
    private _image;
    private _theme;
    private _boxoffice_url;
    private _cache;
    private _colorSchemeListener;
    /**
     * Constructor for ShakrEditor class.
     * Either {@link ShakrEditor.show_id} or {@link ShakrEditor.render_session_id}
     * should be provided to `option` parameter.
     * See {@link ShakrEditorOptions} for details.
     *
     * @param option - Constructor option for ShakrEditor class.
     */
    constructor(option: ShakrEditorOptions);
    /**
     * Close Shakr Editor iframe window.
     * This will trigger {@link ShakrEditor.(on:3) | 'confirm_close' event} if there are any data not saved yet.
     * Or if all data were saved properly, it will close the Shakr Editor window immediately.
     *
     * @param force - Whether it closes Shakr Editor without confirmation from users via {@link ShakrEditor.(on:3) | 'confirm_close' event} or not.
     */
    close(force?: boolean): void;
    /**
     * Launch Shakr Editor and open its iframe window.
     */
    launch(): this;
    /**
     * Update logo image in Shakr Editor.
     * This method cannot be called while Shakr Editor is opened.
     *
     * @deprecated Use {@link ShakrEditor} constructor's {@link ShakrEditorOptions.theme} option instead.
     * @param url - url of the logo image
     */
    setImage(url: string): void;
    /**
     * `init` event emitted when Shakr Editor window is initialized properly.
     *
     * @param type - 'init'
     * @param listener - event listener function
     */
    on(type: 'init', listener: () => void): this;
    /**
     * `load` event emitted when Shakr Editor is fully loaded and ready to be used.
     *
     * @param type - 'open'
     * @param listener - event listener function
     */
    on(type: 'load', listener: () => void): this;
    /**
     * `confirm_close` event emitted when a user tries to close Shakr Editor while it is saving data.
     *
     * @example
     * Here's an exmaple to use this event properly.
     *
     * ```
     * const editor = new ShakrEditor({ ... });
     *
     * editor.on('confirm_close', () => {
     *    // Show confirmation alert in order to let users know about data loss.
     *    if (window.confirm('Are you sure you wish to close the editor? Any unsaved changes that may exist will be lost.')) {
     *        // After confirmation, force close Shakr Editor.
     *        editor.close(true);
     *    }
     * });
     * ```
     *
     * @param type - 'confirm_close'
     * @param listener - event listener function
     */
    on(type: 'confirm_close', listener: () => void): this;
    /**
     * `error` event emitted when there is an error while loading Shakr Editor.
     * Shakr Editor iframe window will be closed when this event is emitted.
     *
     * @param type - 'error'
     * @param listener - event listener function
     */
    on(type: 'error', listener: (data: ShakrEditorErrorEvent) => void): this;
    /**
     * `closed` event emitted when a user closed Shakr Editor.
     *
     * @param type - 'closed'
     * @param listener - event listener function
     */
    on(type: 'closed', listener: () => void): this;
    /**
     * `finish` event emitted when Shakr Editor finishes a editing session.
     * Shakr Editor iframe window will be closed when this event is emitted.
     * `data` parameter with a rendered video url will be provided to event listener
     * when {@link ShakrEditorOptions.wait_rendering} is true.
     *
     * @param type - 'finish'
     * @param listener - event listener function
     */
    on(type: 'finish', listener: (data?: ShakrEditorFinishEvent) => void): this;
    /**
     * `get_media` event emitted when Shakr Editor loads external media library or try to search in it.
     * This event will be only emitted when {@link ShakrEditorOptions.media_libraries} is provided
     * and {@link ShakrEditorMediaLibrary.custom_ui} flag is false or not provided.
     *
     * @param type - 'get_media'
     * @param listener - event listener function
     */
    on(type: 'get_media', listener: (data: ShakrEditorGetMediaEvent) => void): this;
    /**
     * `open_media_library` event emitted when Shakr Editor opens external media library.
     * This event will be only emitted when {@link ShakrEditorOptions.media_libraries} is provided
     * and {@link ShakrEditorMediaLibrary.custom_ui} flag is true.
     *
     * @param type - 'open_media_library'
     * @param listener - event listener function
     */
    on(type: 'open_media_library', listener: (data: ShakrEditorOpenMediaLibraryEvent) => void): this;
    off<K extends keyof ShakrEditorEventMap>(type: K, listener?: (this: this, event: ShakrEditorEventMap[K]) => void): this;
    private _onMessage;
    private _postMessage;
    private _forceClose;
    private _onEvent;
    private _processMediaItems;
    private _updateLogoImage;
}

/**
 * @public
 * Light (light) / Dark (dark) / Dynamically change appearance depends on browser/OS setting (browser)
 */
export declare type ShakrEditorAppearanceType = 'light' | 'dark' | 'browser';

/**
 * @public
 * Shakr Editor error types.
 */
export declare enum ShakrEditorError {
    /**
     * Creative template used by Show or Render Session is currently unavailable or not exist.
     */
    TemplateUnavailable = "template_unavailable",
    /**
     * Some of the API resources accessed by Shakr Editor is not allowed via provided {@link ShakrEditorOptions.access_token | access token option}.
     */
    NoPermission = "no_permission",
    /**
     * Show or Render Session is in archived state which means it is fully rendered and video download url is retrieved.
     */
    Archived = "archived",
    /**
     * Show or Render Session is in rendering state so Shakr Editor cannot edit it.
     */
    Rendering = "rendering",
    /**
     * Show or Render Session was failed to render.
     */
    RenderFailed = "render_failed",
    /**
     * API key used for Editor SDK reached the trial limit.
     */
    TrialLimit = "trial_limit"
}

/**
 * @public
 * Event Object for {@link ShakrEditor.(on:4) | 'error' event}.
 */
export declare interface ShakrEditorErrorEvent {
    /**
     * Type of the error.
     * See {@link ShakrEditorError} for details.
     */
    type: ShakrEditorError;
}

/**
 * @public
 * Event map interface for ShakrEditor.
 */
export declare interface ShakrEditorEventMap {
    /** {@link ShakrEditor.(on:1) | 'init' event} */
    init: void;
    /** {@link ShakrEditor.(on:2) | 'load' event} */
    load: void;
    /** {@link ShakrEditor.(on:3) | 'confirm_close' event} */
    confirm_close: void;
    /** {@link ShakrEditor.(on:4) | 'error' event} */
    error: ShakrEditorErrorEvent;
    /** {@link ShakrEditor.(on:5) | 'closed' event} */
    closed: void;
    /** {@link ShakrEditor.(on:6) | 'finish' event} */
    finish: ShakrEditorFinishEvent | undefined;
    /** {@link ShakrEditor.(on:7) | 'get_media' event} */
    get_media: ShakrEditorGetMediaEvent;
    /** {@link ShakrEditor.(on:8) | 'open_media_library' event} */
    open_media_library: ShakrEditorOpenMediaLibraryEvent;
}

/**
 * @public
 * Event Object for {@link ShakrEditor.(on:6) | 'finish' event}
 * when {@link ShakrEditorOptions.wait_rendering} is true.
 */
export declare interface ShakrEditorFinishEvent {
    /**
     * Download url for a rendered video.
     */
    video_download_url: string;
}

/**
 * @public
 * Event Object for {@link ShakrEditor.(on:7) | 'get_media' event}.
 */
export declare interface ShakrEditorGetMediaEvent {
    /**
     * {@link ShakrEditorMediaLibrary.id} property of {@link ShakrEditorMediaLibrary} provided to
     * {@link ShakrEditor} constructor option {@link ShakrEditorOptions.media_libraries} property.
     * This can be used to distinguish which library has requested the media.
     */
    library_id: string;
    /**
     * Search text entered in Shakr Editor media library user interface.
     * For the initial event that is for the full media list view,
     * this property has an empty string value.
     */
    search_term: string;
    /**
     * Page number starts from 1 which is increased by 1 when a user clicks "Load More" button
     * in Shakr Editor media library user interface.
     */
    page: number;
    /**
     * Callback function that should be called with the media search results and
     * total page number.
     */
    callback: (res: {
        media_items: ShakrEditorMedia[];
        page_total: number;
    }) => void;
}

/**
 * @public
 * Media object interface which should be returned by
 * {@link ShakrEditor.(on:7) | 'get_media' event} or {@link ShakrEditor.(on:8) | 'open_media_library' event}
 * event listener's callback.
 */
export declare interface ShakrEditorMedia {
    /**
     * Unique identifier of the media.
     * This identifier should be unique in a library that has the media.
     */
    id: string;
    /**
     * Title of the media.
     * This will be displayed in Shakr Editor user interface.
     */
    title: string;
    /**
     * Thumbnail url of the media.
     */
    thumb: string;
    /**
     * Original url of the media.
     */
    url: string;
}

/**
 * @public
 * SDK consumer provided media library config
 */
export declare interface ShakrEditorMediaLibrary {
    /**
     * Unique identifier used by {@link ShakrEditor.(on:7) | 'get_media' event} and
     * {@link ShakrEditor.(on:8) | 'open_media_library' event} in order to distinguish
     * a specific media library among multiple libraries provided by consumer.
     */
    id: string;
    /**
     * Whether this media library uses custom user interface or not.
     * When a user selected this media library in Shakr Editor,
     * {@link ShakrEditor} instance will
     * emit {@link ShakrEditor.(on:7) | 'get_media' event} with this flag `false` and
     * emit {@link ShakrEditor.(on:8) | 'open_media_library' event} with this flag `true`.
     * Assumes `false` if this flag is not given.
     */
    custom_ui?: boolean;
    /**
     * Type of the media items that this media library provides.
     */
    media_type: 'image' | 'video' | 'audio' | 'font';
    /**
     * Title of the library.
     * This is the text that will be shown in the Shakr Editor user interface.
     */
    title: string;
}

/**
 * @public
 * Event Object for {@link ShakrEditor.(on:8) | 'open_media_library' event}.
 */
export declare interface ShakrEditorOpenMediaLibraryEvent {
    /**
     * {@link ShakrEditorMediaLibrary.id} property of {@link ShakrEditorMediaLibrary} provided to
     * {@link ShakrEditor} constructor option {@link ShakrEditorOptions.media_libraries} property.
     * This can be used to distinguish which library has requested the media.
     */
    library_id: string;
    /**
     * Callback function that should be called with the selected media items
     */
    callback: (res: {
        media_items: ShakrEditorMedia[];
    }) => void;
}

/**
 * @public
 * {@link ShakrEditor} constructor options interface
 */
export declare interface ShakrEditorOptions {
    /**
     * id of the Show object from Show API.
     *
     * @deprecated Use {@link ShakrEditorOptions.render_session_id} instead
     */
    show_id?: string;
    /**
     * id of the Render Session object from Render Session API.
     */
    render_session_id?: string;
    /**
     * edit_token from Render Session API.
     */
    access_token: string;
    /**
     * Target API URL used in Shakr Editor.
     * Default value is 'https://api.shakr.com/v2'.
     */
    api_url?: string;
    /**
     * Target URL for Box Office (Shakr internal service)
     * Used to search media items from external media sources (e.g. Unsplash, Pexels, etc).
     */
    boxoffice_url?: string;
    /**
     * URL for the custom logo image used in Shakr Editor user interface.
     *
     * @deprecated Use {@link ShakrEditorThemeCustomizeOptions.logo} property of {@link ShakrEditorOptions.theme} instead.
     */
    image?: string;
    /**
     * Force Shakr Editor to display in a specific language.
     * If not set, Shakr Editor will try to follow current browser's language.
     * English(en), Korean(ko) and Japanese(ja) are supported.
     */
    language?: 'en' | 'ko' | 'ja';
    /**
     * Theme setting options for Shakr Editor.
     * See {@link ShakrEditorTheme} for details.
     */
    theme?: ShakrEditorTheme;
    /**
     * Whether Shakr Editor should wait till the video is rendered
     * and return a rendered video url via {@link ShakrEditor.(on:6) | 'finish' event}
     * after user finishes the editing session
     */
    wait_rendering?: boolean;
    /**
     * SDK consumer provided media library configs.
     * See {@link ShakrEditorMediaLibrary} for details.
     */
    media_libraries?: ShakrEditorMediaLibrary[];
    /**
     * Whether Shakr Editor should show Shakr-provided media libraries
     * like Unsplash or Pexels. If not set, media libraries will
     * show by default.
     */
    default_media_libraries?: 'enabled' | 'disabled';
}

/**
 * @public
 * Theme setting options for Shakr Editor.
 */
export declare interface ShakrEditorTheme extends ShakrEditorThemeCustomizeOptions {
    /**
     * `light`/`dark`/`browser` theme option.
     * Default value is `dark`.
     */
    appearance?: ShakrEditorAppearanceType;
    /**
     * Custom button border radius in pixel unit.
     * Default value is 100.
     */
    button_border_radius?: number;
    /**
     * Custom button border width in pixel unit for cancel buttons.
     * Default value is 0.
     */
    cancel_button_border_width?: number;
    /**
     * Custom button border width in pixel unit for confirm type buttons (with accented colors).
     * Default value is 0.
     */
    confirm_button_border_width?: number;
    /**
     * Override styles applied when {@link ShakrEditorTheme.appearance} value is `dark`,
     * or when {@link ShakrEditorTheme.appearance} value is `browser`, and the current theme is `dark`
     */
    dark_override?: ShakrEditorThemeCustomizeOptions;
    /**
     * Override styles applied when {@link ShakrEditorTheme.appearance} value is `light`,
     * or when {@link ShakrEditorTheme.appearance} value is `browser`, and the current theme is `light`
     */
    light_override?: ShakrEditorThemeCustomizeOptions;
}

/**
 * @public
 * Theme customize options for Shakr Editor
 */
export declare interface ShakrEditorThemeCustomizeOptions {
    /**
     * URL for the custom logo image used in Shakr Editor user interface.
     */
    logo?: string;
    /**
     * Custom accent color for UI elements such as buttons, border colors, etc.
     * Accepts a Hex code (6-symbol hexadecimal value). Leading # symbol is optional.
     * (e.g. #058ee2 or 058ee2)
     */
    accent_color?: string;
    /**
     * Custom color for header/footer background.
     * Accepts a Hex code (6-symbol hexadecimal value). Leading # symbol is optional.
     * (e.g. #058ee2 or 058ee2)
     */
    header_footer_background_color?: string;
    /**
     * Custom color for header/footer border.
     * Accepts a Hex code (6-symbol hexadecimal value). Leading # symbol is optional.
     * (e.g. #058ee2 or 058ee2)
     */
    header_footer_border_color?: string;
}

/**
 * @public
 * Shakr Editor class which returns a instance that can
 * communicates with Shakrready Editor iframe window.
 */
export declare class ShakrreadyEditor extends EventEmitter<ShakrreadyEditorEventMap> {
    /**
     * Template Style Version object id which is used to open Shakrready Editor.
     * See {@link ShakrreadyEditorOptions.template_style_version_id} for details.
     */
    template_style_version_id: string;
    /**
     * Whether Shakrready Editor is opened or not.
     */
    is_open: boolean;
    private _wrapper;
    private _iframe;
    private _theme;
    private _access_token;
    private _api_url;
    private _sdk_id;
    private _url;
    private _colorSchemeListener;
    /**
     * Constructor for ShakrEditor class.
     * See {@link ShakrreadyEditorOptions} for details.
     *
     * @param option - Constructor option for ShakrEditor class.
     */
    constructor(options: ShakrreadyEditorOptions);
    /**
     * Close Shakrready Editor iframe window.
     */
    close(): void;
    /**
     * Launch Shakrready Editor and open its iframe window.
     */
    launch(): this;
    /**
     * `init` event emitted when Shakrready Editor window is initialized properly.
     *
     * @param type - 'init'
     * @param listener - event listener function
     */
    on(type: 'init', listener: () => void): this;
    /**
     * `load` event emitted when Shakrready Editor is fully loaded and ready to be used.
     *
     * @param type - 'open'
     * @param listener - event listener function
     */
    on(type: 'load', listener: () => void): this;
    /**
     * `error` event emitted when there is an error while loading Shakrready Editor.
     * Shakrready Editor iframe window will be closed when this event is emitted.
     *
     * @param type - 'error'
     * @param listener - event listener function
     */
    on(type: 'error', listener: (data: ShakrreadyEditorErrorEvent) => void): this;
    /**
     * `closed` event emitted when a user closed Shakrready Editor.
     *
     * @param type - 'closed'
     * @param listener - event listener function
     */
    on(type: 'closed', listener: () => void): this;
    /**
     * `finish` event emitted when Shakrready Editor finishes a editing session.
     *
     * @param type - 'finish'
     * @param listener - event listener function
     */
    on(type: 'finish', listener: () => void): this;
    off<K extends keyof ShakrreadyEditorEventMap>(type: K, listener?: (this: this, event: ShakrreadyEditorEventMap[K]) => void): this;
    private _onMessage;
    private _updateLogoImage;
}

/**
 * @public
 * Shakrready Editor error types.
 */
export declare enum ShakrreadyEditorError {
    /**
     * Creative template is currently unavailable or not exist.
     */
    TemplateUnavailable = "template_unavailable"
}

/**
 * @public
 * Event Object for {@link ShakrreadyEditor.(on:3) | 'error' event}.
 */
export declare interface ShakrreadyEditorErrorEvent {
    /**
     * Type of the error.
     * See {@link ShakrreadyEditorError} for details.
     */
    type: ShakrreadyEditorError;
}

/**
 * @public
 * Event map interface for ShakrreadyEditor.
 */
export declare interface ShakrreadyEditorEventMap {
    /** {@link ShakrreadyEditor.(on:1) | 'init' event} */
    init: void;
    /** {@link ShakrreadyEditor.(on:2) | 'load' event} */
    load: void;
    /** {@link ShakrreadyEditor.(on:3) | 'error' event} */
    error: ShakrreadyEditorErrorEvent;
    /** {@link ShakrreadyEditor.(on:4) | 'closed' event} */
    closed: void;
    /** {@link ShakrreadyEditor.(on:5) | 'finish' event} */
    finish: void;
}

/**
 * @public
 * {@link ShakrreadyEditor} constructor options interface
 */
export declare interface ShakrreadyEditorOptions {
    /**
     * id of the Template Style Version object from Template API.
     */
    template_style_version_id: string;
    /**
     * edit_token from Template API.
     */
    access_token: string;
    /**
     * Target API url used in Shakr Template Wizard (Previously Shakrready Editor).
     * Default value is 'https://api.shakr.com/v2'.
     */
    api_url?: string;
    /**
     * Theme setting options for Shakr Editor.
     * See {@link ShakrEditorTheme} for details.
     */
    theme?: ShakrEditorTheme;
}

export { }
