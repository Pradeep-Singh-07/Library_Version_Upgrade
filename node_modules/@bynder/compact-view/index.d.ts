/// <reference types="react" />
import React from "react";
type AssetType = "AUDIO" | "DOCUMENT" | "IMAGE" | "VIDEO" | "ARCHIVE";
interface AssetFilterJson {
    assetType_in?: AssetType[];
    collectionId?: string;
    metapropertyOptionId_in?: string[];
    searchTerm?: string;
    tagNames_in?: string[];
    isLimitedUse?: boolean;
}
interface Theme {
    colorPrimary?: string;
    colorButtonPrimary?: string;
    colorButtonPrimaryLabel?: string;
    colorButtonPrimaryActive?: string;
    colorButtonPrimaryHover?: string;
    colorButtonPrimaryHoverLabel?: string;
}
interface File {
    url: string;
    width?: number;
    height?: number;
    fileSize?: number;
}
type AdditionalInfo = {
    selectedFile?: File;
};
type OnSuccessCallback = (assets: unknown[], additionalInfo: AdditionalInfo) => void;
type SelectionMode = "SingleSelect" | "SingleSelectFile" | "MultiSelect";
interface PortalConfig {
    url: string;
    editable?: boolean;
}
/**
 * When starting the app or tests a .guard.ts file will be generated. This file
 * will contain a method which is able to validate if a variable is consistent
 * with the Config type.
 */
/** @see {validateConfig} ts-auto-guard:type-guard */
interface Config {
    assetFieldSelection?: string;
    assetFilter?: AssetFilterJson;
    assetTypes?: AssetType[];
    container?: HTMLElement;
    language?: string;
    // ts-auto-guard-suppress function-type
    onSuccess?: OnSuccessCallback;
    mode?: SelectionMode;
    portal?: PortalConfig;
    defaultSearchTerm?: string;
    theme?: Theme;
    hideExternalAccess?: boolean;
    selectedAssets?: string[];
    authentication?: {
        getAccessToken: () => string;
        hideLogout?: boolean;
    };
    hideLimitedUse?: boolean;
}
interface Props {
    assetFieldSelection?: string;
    assetFilter?: AssetFilterJson;
    assetTypes?: AssetType[];
    defaultSearchTerm?: string;
    language?: string;
    mode?: SelectionMode;
    onSuccess?: (assets: unknown[], additionalInformation: {
        selectedFile?: File;
    }) => void;
    theme?: Theme;
    hideExternalAccess?: boolean;
    selectedAssets?: string[];
    hideLimitedUse?: boolean;
}
declare function App({ assetFieldSelection, assetFilter, assetTypes, defaultSearchTerm, language, mode, 
// eslint-disable-next-line no-console
onSuccess, theme, hideExternalAccess, selectedAssets, hideLimitedUse }: Props): JSX.Element;
declare const CompactView: typeof App;
type CompactViewProps = Props;
interface Props$0 {
    portal?: PortalConfig;
    language?: string;
    children: React.ReactNode;
    authentication?: Config["authentication"];
}
// eslint-disable-next-line react/no-multi-comp
declare const LoginWithShield: (props: Props$0) => JSX.Element;
interface Props$1 {
    children: React.ReactNode;
    isOpen?: boolean;
    style?: React.CSSProperties;
    onClose?: () => void;
}
declare function Modal({ children, isOpen, style, onClose }: Props$1): JSX.Element | null;
export { File, LoginWithShield as Login, Modal, PortalConfig, OnSuccessCallback, AdditionalInfo, CompactView, CompactViewProps, SelectionMode as selectionMode, Theme as theme, AssetFilterJson as assetFilter, AssetType as assetType };
