/// <reference types="react" />
import React from "react";
interface MetapropertyOptionType {
    id: string;
    label: string;
    assetCount: number;
}
interface MetapropertyOptionProps {
    metapropertyOption: MetapropertyOptionType;
    selectedOptionIds?: string[];
    isLoading?: boolean;
    onAddOption: () => void;
    onRemoveOption: () => void;
}
declare function MetapropertyOptionComponent(props: MetapropertyOptionProps): JSX.Element;
interface MetapropertyType {
    __typename: "Metaproperty";
    id: string;
    label: string;
    options: MetapropertyOptionType[];
    showInGridView: boolean;
    showInListView: boolean;
}
interface MetapropertyProps {
    metaproperty: MetapropertyType;
    selectedOptionIds: string[];
    isLoading: boolean;
    onAddOption: (metapropertyOption: MetapropertyOptionType) => void;
    onRemoveOption: (metapropertyOption: MetapropertyOptionType) => void;
}
declare function MetaPropertyFilterContent(props: MetapropertyProps): JSX.Element;
interface Derivatives {
    thumbnail?: string;
}
interface Asset {
    id: string;
    derivatives: Derivatives;
    extensions: string[];
    name: string;
    url: string;
    isArchived: boolean;
    isWatermarked: boolean;
    isLimitedUse: boolean;
    metaproperties?: {
        nodes: MetapropertyType[];
    };
}
interface Props {
    className?: string;
    fadeIn?: boolean;
    asset: Asset;
    isSelected: boolean;
    onClick?: (asset: Asset, event: React.MouseEvent) => void;
    isOutlined: boolean;
    children?: React.ReactNode;
}
declare function AssetCard({ className, fadeIn, asset, isSelected, isOutlined, onClick, children }: Props): JSX.Element;
interface Theme {
    colorPrimary?: string;
    colorButtonPrimary?: string;
    colorButtonPrimaryLabel?: string;
    colorButtonPrimaryActive?: string;
    colorButtonPrimaryHover?: string;
    colorButtonPrimaryHoverLabel?: string;
}
type SelectionMode = "SingleSelect" | "SingleSelectFile" | "MultiSelect";
type AssetData = {
    tag: "Loading";
    value: undefined | Asset[];
} | {
    tag: "Loaded";
    value: Asset[];
};
interface Props$0 {
    assets: AssetData;
    count?: number;
    hasNextPage?: boolean;
    isLoading?: boolean;
    loadMore?: () => void;
    onSelect?: (assets: Asset[]) => void;
    onToggle?: (assets: Asset[]) => void;
    emptyStateElement?: React.ReactElement | null;
    selectedAssetIds?: string[];
    selectionMode?: SelectionMode;
    theme?: Theme;
    children?: React.ReactNode;
}
declare function AssetList({ assets, count, hasNextPage, isLoading, loadMore, onSelect, onToggle, emptyStateElement, selectedAssetIds, selectionMode, theme, children }: Props$0): JSX.Element;
interface Props$1 {
    className?: string;
    onClick?: () => void;
    children: React.ReactNode;
    ["data-testid"]?: string;
}
declare function Chip(props: Props$1): JSX.Element;
interface Props$2 {
    className?: string;
    fadeIn?: boolean;
    buttonKind?: "clean" | "secondary";
    isSmall?: boolean;
    direction?: "Down" | "Up";
    title: React.ReactNode;
    alt?: string;
    disabled?: boolean;
    children: (toggle: () => void) => React.ReactNode;
}
declare function Dropdown({ buttonKind, direction, isSmall, fadeIn, ...props }: Props$2): JSX.Element;
interface ListItemProps {
    className?: string;
    onClick?: () => void;
    selected?: boolean;
    children: React.ReactNode;
}
declare function DropdownListItem({ selected, ...props }: ListItemProps): JSX.Element;
interface SmartfilterType {
    __typename: "Smartfilter";
    id: string;
    label: string;
    metaproperties: MetapropertyType[];
    icon?: string;
    zIndex: number;
}
interface SmartfilterProps {
    smartfilter: SmartfilterType;
    selectedOptionIds: string[];
    isLoading: boolean;
    onAddOption: (metapropertyOption: MetapropertyOptionType) => void;
    onRemoveOption: (metapropertyOption: MetapropertyOptionType) => void;
}
declare function SmartFilterContent(props: SmartfilterProps): JSX.Element;
interface Props$3 {
    static?: React.ReactNode;
    className: string;
    children: React.ReactNode;
}
declare function HorizontalScroll(props: Props$3): JSX.Element;
interface Props$4 {
    isLoading: boolean;
    hasNextPage: boolean;
    loadMore: () => void;
    children: React.ReactNode;
}
declare function InfiniteScroll(props: Props$4): JSX.Element;
interface Props$5 {
    children: React.ReactNode;
    isOpen?: boolean;
    style?: React.CSSProperties;
    onClose?: () => void;
}
declare function Modal({ children, isOpen, style, onClose }: Props$5): JSX.Element | null;
interface Props$6 {
    onReset: () => void;
}
declare function NoResults(props: Props$6): JSX.Element;
interface Props$7 {
    error: Error;
    onRetry: () => void;
}
declare function Oops({ error, onRetry }: Props$7): JSX.Element;
/**
 * This component will create a shadow root if it is the first ShadowRoot in the tree.
 * Otherwise it will just render it's childred. This is useful as we don't always know
 * which component will be first in the tree, especially when the components are used
 * externally from the npm package.
 */
declare function ShadowRoot(props: {
    children: React.ReactNode;
}): JSX.Element;
interface Props$8 {
    width?: number;
    className?: string;
}
declare function Skeleton({ width, className }: Props$8): JSX.Element;
interface Props$9 {
    className?: string;
}
declare function Spinner(props: Props$9): JSX.Element;
export { AssetCard as Asset, Asset as displayAsset, AssetList, Chip, Dropdown, DropdownListItem, MetaPropertyFilterContent as Metaproperty, MetapropertyType as metaproperty, MetapropertyOptionComponent as MetapropertyOption, MetapropertyOptionType as metapropertyOption, SmartFilterContent as Smartfilter, SmartfilterType as smartfilter, HorizontalScroll, InfiniteScroll, Modal, NoResults, Oops, ShadowRoot, Skeleton, Spinner };
export { Button, Card, Checkbox } from '@bynder/design-system';
