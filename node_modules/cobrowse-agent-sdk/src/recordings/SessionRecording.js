import Debug from 'debug'
import fetch from 'cross-fetch'
import RESTResource from '../rest/RESTResource.js'
import protectedSymbol from '../util/protected.js'

const debug = Debug('cbio.SessionRecording')

export default class SessionRecording extends RESTResource {
  constructor (api, resource = {}) {
    super(api, resource)
    debug('constructed SessionRecording')
  }

  static url (state = {}) {
    if (!state.id) throw new Error('id is required')
    return `/api/1/sessions/${state.id}/recording`
  }

  get video () {
    const url = `${this.#api.baseurl}${this.#field('video')}`
    return {
      url: async () => url,
      fetch: async () => fetch(url)
    }
  }

  async events () {
    const actions = await fetch(`${this.#api.baseurl}${this.#field('actions')}`)
    if (!actions.ok) throw new Error(`Failed to fetch events: ${await actions.text()}`)

    return [...await actions.json(), ...this.#field('events')].sort((a, b) => {
      return (new Date(a.timestamp).getTime()) - (new Date(b.timestamp).getTime())
    })
  }

  get #api () {
    return this[protectedSymbol].getAPI()
  }

  #field = (key) => {
    return this[protectedSymbol].field(key)
  }

  toJSON = () => {
    return {
      id: this.id
    }
  }
}
