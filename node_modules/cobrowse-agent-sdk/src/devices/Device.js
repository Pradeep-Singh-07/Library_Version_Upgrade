import Debug from 'debug'
import RESTResource from '../rest/RESTResource.js'
import protectedSymbol from '../util/protected.js'

const debug = Debug('cbio.Device')

export default class Device extends RESTResource {
  #sockets

  #presence

  constructor (api, sockets, resource = {}) {
    super(api, resource)
    this.#sockets = sockets
    debug('constructed Device')
  }

  static url (state = {}) {
    return `/api/1/devices/${state.id || ''}`
  }

  #field = (key) => {
    return this[protectedSymbol].field(key)
  }

  #handleEvent = (event, resource) => {
    if (event === 'device' && resource.id === this.id) {
      this[protectedSymbol].updateResource(resource)
    }
    if (event === 'presence' && resource.id === this.id) {
      this.#presence = resource
      this.emit('updated', this)
    }
  }

  #getSocketToken = () => {
    return this.#field('notification_token')
  }

  #syncPresence = () => {
    this.#sockets.send('sync-presence', this.id)
  }

  // eslint-disable-next-line
  get last_active() {
    const lastSeen = new Date((this.#presence && this.#presence.last_seen) || 0).getTime()
    const lastActive = new Date(this.#field('last_active')).getTime()
    return new Date(Math.max(lastSeen, lastActive))
  }

  get online () {
    return !!(this.#presence && this.#presence.present)
  }

  get connectable () {
    // some devices are never connectable (e.g. if account settings disallow)
    if (!this.#field('connectable')) return false
    // for devices should have a socket connection, check the presence state
    if (this.#getSocketToken()) return this.online
    // otherwise we'll assume they're connectable via native push
    return true
  }

  // eslint-disable-next-line
  get custom_data() {
    return this.#field('custom_data')
  }

  get device () {
    return this.#field('device')
  }

  subscribe = async () => {
    this.#sockets.subscribe(this.#getSocketToken)
    this.#sockets.off('event', this.#handleEvent)
    this.#sockets.on('event', this.#handleEvent)

    // sync presence state, and every time the socket opens
    this.#sockets.off('open', this.#syncPresence)
    this.#sockets.on('open', this.#syncPresence)
    this.#syncPresence()
  }

  unsubscribe = () => {
    this.#sockets.unsubscribe(this.#getSocketToken)
    this.#sockets.off('event', this.#handleEvent)
  }

  toJSON = () => {
    return {
      id: this.id,
      device: this.device,
      custom_data: this.custom_data,
      connectable: this.connectable,
      online: this.online,
      last_active: this.last_active
    }
  }
}
