import { EventEmitter } from 'events'
import Debug from 'debug'
import protectedSymbol from '../util/protected.js'

const debug = Debug('cbio.RESTResource')

export default class RESTResource extends EventEmitter {
  #resource

  #api

  constructor (api, resource = {}) {
    super()
    this.#api = api
    this.#resource = resource
  }

  static url (state) {
    debug('url()', state)
    throw new Error('static url(state) must be implemented')
  }

  get id () {
    return this[protectedSymbol].field('id')
  }

  fetch = async (query = {}) => {
    return this[protectedSymbol].updateResource(
      await this.#api.fetch(this.constructor.url(this.#resource), this.#resource, query)
    )
  }

  update = async (state, query = {}) => {
    const update = { ...state, id: this.id }
    return this[protectedSymbol].updateResource(
      await this.#api.update(this.constructor.url(this.#resource), update, query)
    )
  }

  destroy = async (query = {}) => {
    return this[protectedSymbol].updateResource(
      await this.#api.destroy(this.constructor.url(this.#resource), this.#resource, query)
    )
  }

  toString () {
    return `${this.constructor.name} { ${this.id} }`
  }

  [protectedSymbol] = {
    updateResource: (resource) => {
      this.#resource = resource
      this.emit('updated', this)
      return this
    },
    field: (field) => this.#resource[field],
    getResource: () => this.#resource,
    getAPI: () => this.#api
  }
}
