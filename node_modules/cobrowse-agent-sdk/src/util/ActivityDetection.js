import { EventEmitter } from 'events'
import throttle from 'lodash/throttle.js'
import Debug from 'debug'

const debug = Debug('cbio.ActivityDetection')

export default class ActivityDetection extends EventEmitter {
  #started = false

  #active = false

  #activeTimeout = null

  #inactiveTime = 15 * 60 * 1000

  constructor (timeout) {
    super()
    if (timeout) this.#inactiveTime = timeout
  }

  start = () => {
    if (this.#started) return
    this.#started = true

    debug('started')
    document.addEventListener('mouseenter', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('mouseleave', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('mousemove', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('touchstart', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('touchend', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('touchmove', this.#onActivity, { capture: true, passive: true })
    document.addEventListener('visibilitychange', this.#onActivity, { capture: true })

    // page load counts as possible activity
    this.#onActivity()
  }

  stop = () => {
    this.#active = false
    this.#started = false

    debug('stopped')
    clearTimeout(this.#activeTimeout)
    this.removeAllListeners()
    document.removeEventListener('mouseenter', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('mouseleave', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('mousemove', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('touchstart', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('touchend', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('touchmove', this.#onActivity, { capture: true, passive: true })
    document.removeEventListener('visibilitychange', this.#onActivity, { capture: true })
  }

  isActive = () => {
    return this.#active
  }

  #onActivity = throttle(() => {
    this.#makeActive()
    clearTimeout(this.#activeTimeout)
    this.#activeTimeout = setTimeout(this.#makeInactive, this.#inactiveTime)
    this.emit('activity')
  }, 500, { trailing: false })

  #makeActive = () => {
    // skip if already active
    if (this.#active) return
    // or if the browser thinks it's not visible
    if (document.hidden) {
      debug('window is hidden, not becoming active')
      return
    }
    // then mark as active and emit event
    this.#active = true
    debug('became active')
    this.emit('active')
  }

  #makeInactive = () => {
    if (this.#active) {
      this.#active = false
      debug('became inactive')
      this.emit('inactive')
    }
  }
}
