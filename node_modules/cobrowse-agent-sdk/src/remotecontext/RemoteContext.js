import Debug from 'debug'
import { EventEmitter } from 'events'
import { Session } from '../sessions/index.js'
import protectedSymbol from '../util/protected.js'
import APIError from '../rest/APIError.js'

const debug = Debug('cbio.RemoteContext')

export default class RemoteContext extends EventEmitter {
  #target

  #session

  constructor (target, api, sockets) {
    super()
    if (!target) throw new Error('context cannot be null')
    if (target instanceof window.HTMLIFrameElement) target = target.contentWindow
    if (!target.postMessage) throw new Error('target must have postMessage interface')

    this.#target = target
    this.#session = new Session(api, sockets)

    window.addEventListener('message', this.#onPostMessage)
  }

  #onSessionUpdated = (data) => {
    const existingId = this.#session.id
    this.#session[protectedSymbol].updateResource(data)

    // if the ID of the session changes then a new session has been
    // loaded into the iframe, so we should trigger a 'loaded' event
    if (existingId !== this.#session.id) {
      // TODO: should we be replacing the instance of the
      // Session here too? Removing all listeners etc...
      this.emit('session.loaded', this.#session)
    }

    // then trigger the regular update event too
    this.emit('session.updated', this.#session)
  }

  #onPostMessage = (e) => {
    if (e.source !== this.#target) return
    debug('got post message', e.data)
    const { event, data } = e.data
    if (event === 'session' && data) {
      this.#onSessionUpdated(data)
    }
    if (event === 'screen' && data) {
      this.emit('screen.updated', data)
    }
    if (event === 'error' && data) {
      this.emit('error', new APIError(data.id, null, data.message))
    }
  }

  setTool = async (tool) => {
    debug('set tool', tool)
    this.#target.postMessage({ tool }, '*')
    return true
  }

  clearAnnotations = async () => {
    debug('clear annotations')
    this.#target.postMessage({ drawing: null }, '*')
    return true
  }

  endSession = async () => {
    debug('end session')
    this.#target.postMessage({ session: { state: 'ended' } }, '*')
    return true
  }

  setFullDevice = async (state) => {
    this.#target.postMessage({ session: { full_device: state } }, '*')
    return true
  }

  setRemoteControl = async (state) => {
    this.#target.postMessage({ session: { remote_control: state } }, '*')
    return true
  }

  androidBack = async () => {
    this.#target.postMessage({ control: { state: 'keydown', key: 'GoBack' } }, '*')
    return true
  }

  androidHome = async () => {
    this.#target.postMessage({ control: { state: 'keydown', key: 'GoHome' } }, '*')
    return true
  }

  destroy = () => {
    window.removeEventListener('message', this.#onPostMessage)
    this.removeAllListeners()
    this.#target = null
  }
}
