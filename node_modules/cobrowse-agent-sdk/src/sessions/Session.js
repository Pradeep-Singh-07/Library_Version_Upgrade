import Debug from 'debug'
import RESTResource from '../rest/RESTResource.js'
import recordings from '../recordings/index.js'
import protectedSymbol from '../util/protected.js'

const debug = Debug('cbio.Session')

export default class Session extends RESTResource {
  #sockets

  constructor (api, sockets, resource = {}) {
    super(api, resource)
    this.#sockets = sockets
    debug('constructed Session')

    // detect ended events and forward them on as their own event
    const superUpdateResource = this[protectedSymbol].updateResource
    this[protectedSymbol].updateResource = (state) => {
      const wasEnded = this.isEnded()
      superUpdateResource(state)
      if (this.isEnded() && !wasEnded) {
        this.emit('ended', this)
        this.unsubscribe()
      }
    }
  }

  static url (state = {}) {
    return `/api/1/sessions/${state.id || ''}`
  }

  get #api () {
    return this[protectedSymbol].getAPI()
  }

  #field = (key) => {
    return this[protectedSymbol].field(key)
  }

  end = async () => {
    return this.update({ state: 'ended' })
  }

  get code () {
    return this.#field('code')
  }

  get state () {
    return this.#field('state')
  }

  isActive = () => {
    return this.state === 'active'
  }

  isAuthorizing = () => {
    return this.state === 'authorizing'
  }

  isPending = () => {
    return this.state === 'pending'
  }

  isEnded = () => {
    return this.state === 'ended'
  }

  get recorded () {
    return this.#field('recorded')
  }

  async recording () {
    return recordings(this.#api).get(this.id)
  }

  get agent () {
    return this.#field('agent') || false
  }

  // eslint-disable-next-line
  get custom_data() {
    return this.#field('custom_data')
  }

  get device () {
    return this.#field('device')
  }

  get created () {
    return this.#field('updated') ? new Date(this.#field('created')) : null
  }

  get updated () {
    return this.#field('updated') ? new Date(this.#field('updated')) : null
  }

  get activated () {
    return this.#field('activated') ? new Date(this.#field('activated')) : null
  }

  get ended () {
    return this.#field('ended') ? new Date(this.#field('ended')) : null
  }

  // eslint-disable-next-line
  get full_device() {
    if (this.#field('full_device') === true) return 'on'
    if (this.#field('full_device') === false) return 'off'
    return this.#field('full_device')
  }

  setFullDevice = async (state) => {
    return this.update({ full_device: state })
  }

  // eslint-disable-next-line
  get remote_control() {
    return this.#field('remote_control')
  }

  setRemoteControl = async (state) => {
    return this.update({ remote_control: state })
  }

  #handleEvent = (event, resource) => {
    if (event === 'session' && resource.id === this.id) {
      this[protectedSymbol].updateResource(resource)
    }
  }

  #getSocketToken = () => {
    return this.#field('control_token')
  }

  subscribe = async () => {
    if (this.#sockets) {
      this.#sockets.subscribe(this.#getSocketToken)
      this.#sockets.off('event', this.#handleEvent)
      this.#sockets.on('event', this.#handleEvent)
    } else {
      throw new Error('cannot subscribe to session without authorization')
    }
  }

  unsubscribe = () => {
    if (this.#sockets) {
      this.#sockets.unsubscribe(this.#getSocketToken)
      this.#sockets.off('event', this.#handleEvent)
    }
  }

  toJSON = () => {
    return {
      id: this.id,
      device: this.device,
      custom_data: this.custom_data,
      agent: this.agent,
      created: this.created,
      updated: this.updated,
      activated: this.activated,
      ended: this.ended,
      full_device: this.full_device,
      remote_control: this.remote_control,
      state: this.state,
      recorded: this.recorded
    }
  }
}
