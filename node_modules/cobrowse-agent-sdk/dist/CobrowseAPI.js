"use strict";

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.weak-map.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("regenerator-runtime/runtime.js");

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _debug = _interopRequireDefault(require("debug"));

var _events = require("events");

var _RESTAPI = _interopRequireDefault(require("./rest/RESTAPI.js"));

var _SocketManager = _interopRequireDefault(require("./socket/SocketManager.js"));

var _RemoteContext = _interopRequireDefault(require("./remotecontext/RemoteContext.js"));

var _ActivityDetection = _interopRequireDefault(require("./util/ActivityDetection.js"));

var _TokenExpiredError = _interopRequireDefault(require("./rest/TokenExpiredError.js"));

var _devices = _interopRequireDefault(require("./devices"));

var _sessions = _interopRequireDefault(require("./sessions"));

var _users = _interopRequireDefault(require("./users"));

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var debug = (0, _debug.default)('cbio.CobrowseAPI');

var _activity = /*#__PURE__*/new WeakMap();

var _sockets = /*#__PURE__*/new WeakMap();

var _api = /*#__PURE__*/new WeakMap();

var _isBrowserContext = /*#__PURE__*/new WeakMap();

var _getSocketAuth = /*#__PURE__*/new WeakMap();

var _handleSocketOpen = /*#__PURE__*/new WeakMap();

var _handleError = /*#__PURE__*/new WeakMap();

var CobrowseAPI = /*#__PURE__*/function (_EventEmitter) {
  _inherits(CobrowseAPI, _EventEmitter);

  var _super = _createSuper(CobrowseAPI);

  function CobrowseAPI(token) {
    var _options$api;

    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CobrowseAPI);

    _this = _super.call(this);

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _isBrowserContext, {
      get: _get_isBrowserContext,
      set: void 0
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _activity, {
      writable: true,
      value: new _ActivityDetection.default()
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _sockets, {
      writable: true,
      value: new _SocketManager.default({
        getSocketAuth: function getSocketAuth() {
          return _classPrivateFieldGet(_assertThisInitialized(_this), _getSocketAuth).call(_assertThisInitialized(_this));
        }
      })
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _api, {
      writable: true,
      value: void 0
    });

    _defineProperty(_assertThisInitialized(_this), "attachContext", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(target) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_classPrivateFieldGet(_assertThisInitialized(_this), _isBrowserContext)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", new _RemoteContext.default(target));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _getSocketAuth, {
      writable: true,
      value: (0, _throttle.default)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var user;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _classPrivateFieldGet(_assertThisInitialized(_this), _api).fetch('/api/1/users/me');

              case 2:
                user = _context2.sent;
                return _context2.abrupt("return", {
                  token: user.notification_token,
                  url: user.notification_url
                });

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })), 60 * 60 * 1000)
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _handleSocketOpen, {
      writable: true,
      value: function value() {
        _this.emit('socket:open');
      }
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _handleError, {
      writable: true,
      value: function value(e) {
        // if the JWT has expired, there's no point in keeping on trying
        // to connect the sockets, so kill the activity watching and socket
        // loop. We'll restart these if the token is updated
        if (e instanceof _TokenExpiredError.default) {
          console.warn('The CobrowseIO token has expired. Please set a new token');

          if (_classPrivateFieldGet(_assertThisInitialized(_this), _isBrowserContext)) {
            _classPrivateFieldGet(_assertThisInitialized(_this), _activity).stop();

            _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).disconnect();
          }

          _this.emit('error', e);
        } else throw e;
      }
    });

    debug('constructed CobrowseAPI');

    _classPrivateFieldSet(_assertThisInitialized(_this), _api, new _RESTAPI.default((_options$api = options.api) !== null && _options$api !== void 0 ? _options$api : 'https://cobrowse.io')); // headers for REST api calls


    _classPrivateFieldGet(_assertThisInitialized(_this), _api).setHeader('X-CobrowsePlatform', 'agent-sdk');

    _classPrivateFieldGet(_assertThisInitialized(_this), _api).setHeader('X-CobrowseSDKVersion', _package.default.version);

    _classPrivateFieldGet(_assertThisInitialized(_this), _api).setHeader('X-CobrowseAPIVersion', '1.2.0');

    if (_classPrivateFieldGet(_assertThisInitialized(_this), _isBrowserContext)) {
      // and some on sockets
      _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).setHeader('X-CobrowsePlatform', 'agent-sdk');

      _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).setHeader('X-CobrowseSDKVersion', _package.default.version);

      _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).on('error', _classPrivateFieldGet(_assertThisInitialized(_this), _handleError));

      _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).on('open', _classPrivateFieldGet(_assertThisInitialized(_this), _handleSocketOpen));
    }

    if (token) _this.token = token;

    if (_classPrivateFieldGet(_assertThisInitialized(_this), _isBrowserContext)) {
      // watch for activity in the window, we only connect sockets when
      // windows are actually in use
      _classPrivateFieldGet(_assertThisInitialized(_this), _activity).start();

      _classPrivateFieldGet(_assertThisInitialized(_this), _activity).on('active', function () {
        return _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).connect().catch(_classPrivateFieldGet(_assertThisInitialized(_this), _handleError));
      });

      _classPrivateFieldGet(_assertThisInitialized(_this), _activity).on('inactive', _classPrivateFieldGet(_assertThisInitialized(_this), _sockets).disconnect);
    }

    return _this;
  }

  _createClass(CobrowseAPI, [{
    key: "token",
    get: function get() {
      var header = _classPrivateFieldGet(this, _api).getHeader('Authorization');

      if (!header) return null;
      return header.replace(/^Bearer /, '');
    },
    set: function set(token) {
      debug('updated token to', token);
      if (token) _classPrivateFieldGet(this, _api).setHeader('Authorization', "Bearer ".concat(token));else _classPrivateFieldGet(this, _api).removeHeader('Authorization'); // try to restart the activity loop if the token is updated
      // see the comment in #handleError for why this is

      if (_classPrivateFieldGet(this, _isBrowserContext)) _classPrivateFieldGet(this, _activity).start();
    }
  }, {
    key: "license",
    get: function get() {
      return _classPrivateFieldGet(this, _api).getHeader('X-CobrowseLicense');
    },
    set: function set(license) {
      if (license) _classPrivateFieldGet(this, _api).setHeader('X-CobrowseLicense', license);else _classPrivateFieldGet(this, _api).removeHeader('X-CobrowseLicense');
    }
  }, {
    key: "api",
    get: function get() {
      return _classPrivateFieldGet(this, _api).baseurl;
    }
  }, {
    key: "devices",
    get: function get() {
      return (0, _devices.default)(_classPrivateFieldGet(this, _api), _classPrivateFieldGet(this, _sockets));
    }
  }, {
    key: "sessions",
    get: function get() {
      return (0, _sessions.default)(_classPrivateFieldGet(this, _api), _classPrivateFieldGet(this, _sockets));
    }
  }, {
    key: "users",
    get: function get() {
      return (0, _users.default)(_classPrivateFieldGet(this, _api));
    }
  }]);

  return CobrowseAPI;
}(_events.EventEmitter);

exports.default = CobrowseAPI;

function _get_isBrowserContext() {
  return (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object';
}