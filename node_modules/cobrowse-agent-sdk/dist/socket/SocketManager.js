"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.set.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.weak-map.js");

var _events = require("events");

var _CBORSocket = _interopRequireDefault(require("./CBORSocket.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _subscriptions = /*#__PURE__*/new WeakMap();

var _headers = /*#__PURE__*/new WeakMap();

var _socket = /*#__PURE__*/new WeakMap();

var _delegate = /*#__PURE__*/new WeakMap();

var _generateUrl = /*#__PURE__*/new WeakMap();

var _onOpen = /*#__PURE__*/new WeakMap();

var _onEvent = /*#__PURE__*/new WeakMap();

var _onError = /*#__PURE__*/new WeakMap();

var SocketManager = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SocketManager, _EventEmitter);

  var _super = _createSuper(SocketManager);

  function SocketManager(delegate) {
    var _this;

    _classCallCheck(this, SocketManager);

    _this = _super.call(this);

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _subscriptions, {
      writable: true,
      value: new Set()
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _headers, {
      writable: true,
      value: {}
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _socket, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _delegate, {
      writable: true,
      value: void 0
    });

    _defineProperty(_assertThisInitialized(_this), "setHeader", function (key, value) {
      _classPrivateFieldGet(_assertThisInitialized(_this), _headers)[key] = value;
    });

    _defineProperty(_assertThisInitialized(_this), "connect", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              // create the socket if not already created, the function passed in to
              // the socket consturctor will always use the latest auth token saved on
              // the instance on reconnects
              if (!_classPrivateFieldGet(_assertThisInitialized(_this), _socket)) {
                _classPrivateFieldSet(_assertThisInitialized(_this), _socket, new _CBORSocket.default({
                  getUrl: function () {
                    var _getUrl = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.t0 = _classPrivateFieldGet(_assertThisInitialized(_this), _generateUrl);
                              _context.t1 = _assertThisInitialized(_this);
                              _context.next = 4;
                              return _classPrivateFieldGet(_assertThisInitialized(_this), _delegate).getSocketAuth();

                            case 4:
                              _context.t2 = _context.sent;
                              return _context.abrupt("return", _context.t0.call.call(_context.t0, _context.t1, _context.t2));

                            case 6:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    function getUrl() {
                      return _getUrl.apply(this, arguments);
                    }

                    return getUrl;
                  }()
                }));

                _classPrivateFieldGet(_assertThisInitialized(_this), _socket).setMaxReconnectDelay(10 * 60 * 1000);

                _classPrivateFieldGet(_assertThisInitialized(_this), _socket).on('open', _classPrivateFieldGet(_assertThisInitialized(_this), _onOpen));

                _classPrivateFieldGet(_assertThisInitialized(_this), _socket).on('event', _classPrivateFieldGet(_assertThisInitialized(_this), _onEvent));

                _classPrivateFieldGet(_assertThisInitialized(_this), _socket).on('error', _classPrivateFieldGet(_assertThisInitialized(_this), _onError));
              }

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _generateUrl, {
      writable: true,
      value: function value(_ref2) {
        var url = _ref2.url,
            token = _ref2.token;
        var headers = Object.keys(_classPrivateFieldGet(_assertThisInitialized(_this), _headers)).map(function (key) {
          return "".concat(key, "=").concat(_classPrivateFieldGet(_assertThisInitialized(_this), _headers)[key]);
        }).join('&');
        var wsUrl = url.replace('https://', 'wss://').replace('http://', 'ws://');
        return "".concat(wsUrl, "/sockets/1/ws?access_token=").concat(token, "&").concat(headers);
      }
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _onOpen, {
      writable: true,
      value: function value() {
        // resubscribe tokens on successful (re)connections.
        _toConsumableArray(_classPrivateFieldGet(_assertThisInitialized(_this), _subscriptions)).forEach(function (tokenFn) {
          var token = tokenFn();
          if (token) _this.send('subscribe', token);
        });

        _this.emit('open');
      }
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _onEvent, {
      writable: true,
      value: function value(event, data) {
        _this.emit('event', event, data);
      }
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _onError, {
      writable: true,
      value: function value(e) {
        _this.emit('error', e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "send", function (event, data) {
      if (!_classPrivateFieldGet(_assertThisInitialized(_this), _socket)) return false;
      return _classPrivateFieldGet(_assertThisInitialized(_this), _socket).send(event, data);
    });

    _defineProperty(_assertThisInitialized(_this), "disconnect", function () {
      if (_classPrivateFieldGet(_assertThisInitialized(_this), _socket)) {
        _classPrivateFieldGet(_assertThisInitialized(_this), _socket).close();

        _classPrivateFieldSet(_assertThisInitialized(_this), _socket, null);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "subscribe", function (subscriptionTokenFn) {
      _classPrivateFieldGet(_assertThisInitialized(_this), _subscriptions).add(subscriptionTokenFn); // ensure a connection has been attempted


      _this.connect().catch(_classPrivateFieldGet(_assertThisInitialized(_this), _onError));

      if (_classPrivateFieldGet(_assertThisInitialized(_this), _socket) && subscriptionTokenFn()) {
        _this.send('subscribe', subscriptionTokenFn());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "unsubscribe", function (tokenFn) {
      _classPrivateFieldGet(_assertThisInitialized(_this), _subscriptions).delete(tokenFn);

      if (_classPrivateFieldGet(_assertThisInitialized(_this), _subscriptions).size === 0) _this.disconnect();
    });

    _classPrivateFieldSet(_assertThisInitialized(_this), _delegate, delegate);

    _this.setMaxListeners(10000);

    return _this;
  }

  return _createClass(SocketManager);
}(_events.EventEmitter);

exports.default = SocketManager;