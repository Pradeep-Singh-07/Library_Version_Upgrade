function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
import { EventEmitter } from 'events';
import Debug from 'debug';
import protectedSymbol from '../util/protected.js';
const debug = Debug('cbio.RESTResource');
var _resource = /*#__PURE__*/new WeakMap();
var _api = /*#__PURE__*/new WeakMap();
export default class RESTResource extends EventEmitter {
  constructor(api, _resource2 = {}) {
    super();
    _classPrivateFieldInitSpec(this, _resource, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _api, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "fetch", async (query = {}) => {
      return this[protectedSymbol].updateResource(await _classPrivateFieldGet(this, _api).fetch(this.constructor.url(_classPrivateFieldGet(this, _resource)), _classPrivateFieldGet(this, _resource), query));
    });
    _defineProperty(this, "update", async (state, query = {}) => {
      const update = {
        ...state,
        id: this.id
      };
      return this[protectedSymbol].updateResource(await _classPrivateFieldGet(this, _api).update(this.constructor.url(_classPrivateFieldGet(this, _resource)), update, query));
    });
    _defineProperty(this, "destroy", async (query = {}) => {
      return this[protectedSymbol].updateResource(await _classPrivateFieldGet(this, _api).destroy(this.constructor.url(_classPrivateFieldGet(this, _resource)), _classPrivateFieldGet(this, _resource), query));
    });
    _defineProperty(this, protectedSymbol, {
      updateResource: resource => {
        _classPrivateFieldSet(this, _resource, resource);
        this.emit('updated', this);
        return this;
      },
      field: field => _classPrivateFieldGet(this, _resource)[field],
      getResource: () => _classPrivateFieldGet(this, _resource),
      getAPI: () => _classPrivateFieldGet(this, _api)
    });
    _classPrivateFieldSet(this, _api, api);
    _classPrivateFieldSet(this, _resource, _resource2);
  }
  static url(state) {
    debug('url()', state);
    throw new Error('static url(state) must be implemented');
  }
  get id() {
    return this[protectedSymbol].field('id');
  }
  toString() {
    return `${this.constructor.name} { ${this.id} }`;
  }
}