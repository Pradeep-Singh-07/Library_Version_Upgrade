function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
import Debug from 'debug';
import RESTResource from '../rest/RESTResource.js';
import recordings from '../recordings/index.js';
import protectedSymbol from '../util/protected.js';
const debug = Debug('cbio.Session');
var _sockets = /*#__PURE__*/new WeakMap();
var _api = /*#__PURE__*/new WeakMap();
var _field = /*#__PURE__*/new WeakMap();
var _handleEvent = /*#__PURE__*/new WeakMap();
var _getSocketToken = /*#__PURE__*/new WeakMap();
export default class Session extends RESTResource {
  constructor(api, sockets, _resource = {}) {
    super(api, _resource);
    _classPrivateFieldInitSpec(this, _api, {
      get: _get_api,
      set: void 0
    });
    _classPrivateFieldInitSpec(this, _sockets, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _field, {
      writable: true,
      value: key => {
        return this[protectedSymbol].field(key);
      }
    });
    _defineProperty(this, "end", async () => {
      return this.update({
        state: 'ended'
      });
    });
    _defineProperty(this, "isActive", () => {
      return this.state === 'active';
    });
    _defineProperty(this, "isAuthorizing", () => {
      return this.state === 'authorizing';
    });
    _defineProperty(this, "isPending", () => {
      return this.state === 'pending';
    });
    _defineProperty(this, "isEnded", () => {
      return this.state === 'ended';
    });
    _defineProperty(this, "setFullDevice", async state => {
      return this.update({
        full_device: state
      });
    });
    _defineProperty(this, "setRemoteControl", async state => {
      return this.update({
        remote_control: state
      });
    });
    _classPrivateFieldInitSpec(this, _handleEvent, {
      writable: true,
      value: (event, resource) => {
        if (event === 'session' && resource.id === this.id) {
          this[protectedSymbol].updateResource(resource);
        }
      }
    });
    _classPrivateFieldInitSpec(this, _getSocketToken, {
      writable: true,
      value: () => {
        return _classPrivateFieldGet(this, _field).call(this, 'control_token');
      }
    });
    _defineProperty(this, "subscribe", async () => {
      if (_classPrivateFieldGet(this, _sockets)) {
        _classPrivateFieldGet(this, _sockets).subscribe(_classPrivateFieldGet(this, _getSocketToken));
        _classPrivateFieldGet(this, _sockets).off('event', _classPrivateFieldGet(this, _handleEvent));
        _classPrivateFieldGet(this, _sockets).on('event', _classPrivateFieldGet(this, _handleEvent));
      } else {
        throw new Error('cannot subscribe to session without authorization');
      }
    });
    _defineProperty(this, "unsubscribe", () => {
      if (_classPrivateFieldGet(this, _sockets)) {
        _classPrivateFieldGet(this, _sockets).unsubscribe(_classPrivateFieldGet(this, _getSocketToken));
        _classPrivateFieldGet(this, _sockets).off('event', _classPrivateFieldGet(this, _handleEvent));
      }
    });
    _defineProperty(this, "toJSON", () => {
      return {
        id: this.id,
        device: this.device,
        custom_data: this.custom_data,
        agent: this.agent,
        created: this.created,
        updated: this.updated,
        activated: this.activated,
        ended: this.ended,
        full_device: this.full_device,
        remote_control: this.remote_control,
        state: this.state,
        recorded: this.recorded
      };
    });
    _classPrivateFieldSet(this, _sockets, sockets);
    debug('constructed Session');

    // detect ended events and forward them on as their own event
    const superUpdateResource = this[protectedSymbol].updateResource;
    this[protectedSymbol].updateResource = state => {
      const wasEnded = this.isEnded();
      superUpdateResource(state);
      if (this.isEnded() && !wasEnded) {
        this.emit('ended', this);
        this.unsubscribe();
      }
    };
  }
  static url(state = {}) {
    return `/api/1/sessions/${state.id || ''}`;
  }
  get code() {
    return _classPrivateFieldGet(this, _field).call(this, 'code');
  }
  get state() {
    return _classPrivateFieldGet(this, _field).call(this, 'state');
  }
  get recorded() {
    return _classPrivateFieldGet(this, _field).call(this, 'recorded');
  }
  async recording() {
    return recordings(_classPrivateFieldGet(this, _api)).get(this.id);
  }
  get agent() {
    return _classPrivateFieldGet(this, _field).call(this, 'agent') || false;
  }

  // eslint-disable-next-line
  get custom_data() {
    return _classPrivateFieldGet(this, _field).call(this, 'custom_data');
  }
  get device() {
    return _classPrivateFieldGet(this, _field).call(this, 'device');
  }
  get created() {
    return _classPrivateFieldGet(this, _field).call(this, 'updated') ? new Date(_classPrivateFieldGet(this, _field).call(this, 'created')) : null;
  }
  get updated() {
    return _classPrivateFieldGet(this, _field).call(this, 'updated') ? new Date(_classPrivateFieldGet(this, _field).call(this, 'updated')) : null;
  }
  get activated() {
    return _classPrivateFieldGet(this, _field).call(this, 'activated') ? new Date(_classPrivateFieldGet(this, _field).call(this, 'activated')) : null;
  }
  get ended() {
    return _classPrivateFieldGet(this, _field).call(this, 'ended') ? new Date(_classPrivateFieldGet(this, _field).call(this, 'ended')) : null;
  }

  // eslint-disable-next-line
  get full_device() {
    if (_classPrivateFieldGet(this, _field).call(this, 'full_device') === true) return 'on';
    if (_classPrivateFieldGet(this, _field).call(this, 'full_device') === false) return 'off';
    return _classPrivateFieldGet(this, _field).call(this, 'full_device');
  }
  // eslint-disable-next-line
  get remote_control() {
    return _classPrivateFieldGet(this, _field).call(this, 'remote_control');
  }
}
function _get_api() {
  return this[protectedSymbol].getAPI();
}