function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
import Debug from 'debug';
import RESTResource from '../rest/RESTResource.js';
import protectedSymbol from '../util/protected.js';
const debug = Debug('cbio.User');
var _field = /*#__PURE__*/new WeakMap();
export default class User extends RESTResource {
  constructor(api, resource = {}) {
    super(api, resource);
    _classPrivateFieldInitSpec(this, _field, {
      writable: true,
      value: key => {
        return this[protectedSymbol].field(key);
      }
    });
    _defineProperty(this, "toJSON", () => {
      return {
        id: this.id
      };
    });
    debug('constructed User');
  }
  static url(state = {}) {
    return `/api/1/users/${state.id || ''}`;
  }
}