"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.weak-map.js");

require("core-js/modules/web.dom-collections.iterator.js");

var _events = require("events");

var _lodash = require("lodash");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var debug = require('debug')('cbio.ActivityDetection');

var _started = /*#__PURE__*/new WeakMap();

var _active = /*#__PURE__*/new WeakMap();

var _activeTimeout = /*#__PURE__*/new WeakMap();

var _inactiveTime = /*#__PURE__*/new WeakMap();

var _onActivity = /*#__PURE__*/new WeakMap();

var _makeActive = /*#__PURE__*/new WeakMap();

var _makeInactive = /*#__PURE__*/new WeakMap();

var ActivityDetection = /*#__PURE__*/function (_EventEmitter) {
  _inherits(ActivityDetection, _EventEmitter);

  var _super = _createSuper(ActivityDetection);

  function ActivityDetection(timeout) {
    var _this;

    _classCallCheck(this, ActivityDetection);

    _this = _super.call(this);

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _started, {
      writable: true,
      value: false
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _active, {
      writable: true,
      value: false
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _activeTimeout, {
      writable: true,
      value: null
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _inactiveTime, {
      writable: true,
      value: 15 * 60 * 1000
    });

    _defineProperty(_assertThisInitialized(_this), "start", function () {
      if (_classPrivateFieldGet(_assertThisInitialized(_this), _started)) return;

      _classPrivateFieldSet(_assertThisInitialized(_this), _started, true);

      debug('started');
      document.addEventListener('mouseenter', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('mouseleave', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('mousemove', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('touchstart', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('touchend', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('touchmove', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.addEventListener('visibilitychange', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true
      }); // page load counts as possible activity

      _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity).call(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "stop", function () {
      _classPrivateFieldSet(_assertThisInitialized(_this), _active, false);

      _classPrivateFieldSet(_assertThisInitialized(_this), _started, false);

      debug('stopped');
      clearTimeout(_classPrivateFieldGet(_assertThisInitialized(_this), _activeTimeout));

      _this.removeAllListeners();

      document.removeEventListener('mouseenter', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('mouseleave', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('mousemove', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('touchstart', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('touchend', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('touchmove', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true,
        passive: true
      });
      document.removeEventListener('visibilitychange', _classPrivateFieldGet(_assertThisInitialized(_this), _onActivity), {
        capture: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "isActive", function () {
      return _classPrivateFieldGet(_assertThisInitialized(_this), _active);
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _onActivity, {
      writable: true,
      value: (0, _lodash.throttle)(function () {
        _classPrivateFieldGet(_assertThisInitialized(_this), _makeActive).call(_assertThisInitialized(_this));

        clearTimeout(_classPrivateFieldGet(_assertThisInitialized(_this), _activeTimeout));

        _classPrivateFieldSet(_assertThisInitialized(_this), _activeTimeout, setTimeout(_classPrivateFieldGet(_assertThisInitialized(_this), _makeInactive), _classPrivateFieldGet(_assertThisInitialized(_this), _inactiveTime)));

        _this.emit('activity');
      }, 500, {
        trailing: false
      })
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _makeActive, {
      writable: true,
      value: function value() {
        // skip if already active
        if (_classPrivateFieldGet(_assertThisInitialized(_this), _active)) return; // or if the browser thinks it's not visible

        if (document.hidden) {
          debug('window is hidden, not becoming active');
          return;
        } // then mark as active and emit event


        _classPrivateFieldSet(_assertThisInitialized(_this), _active, true);

        debug('became active');

        _this.emit('active');
      }
    });

    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _makeInactive, {
      writable: true,
      value: function value() {
        if (_classPrivateFieldGet(_assertThisInitialized(_this), _active)) {
          _classPrivateFieldSet(_assertThisInitialized(_this), _active, false);

          debug('became inactive');

          _this.emit('inactive');
        }
      }
    });

    if (timeout) _classPrivateFieldSet(_assertThisInitialized(_this), _inactiveTime, timeout);
    return _this;
  }

  return _createClass(ActivityDetection);
}(_events.EventEmitter);

exports.default = ActivityDetection;