{"version":3,"file":"formik.cjs.production.js","sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/withFormik.tsx"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via its path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n","import * as React from 'react';\nimport { FormikContext } from './types';\n\nconst PrivateFormikContext = React.createContext<FormikContext<any>>({} as any);\nexport const FormikProvider = PrivateFormikContext.Provider;\nexport const FormikConsumer = PrivateFormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  return React.useContext<FormikContext<Values>>(PrivateFormikContext);\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport warning from 'tiny-warning';\n\n// We already used FormikActions. So we'll go all Elm-y, and use Message.\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | { type: 'SET_FORMIK_STATE'; payload: FormikState<Values> }\n  | { type: 'RESET_FORM'; payload: FormikState<Values> };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n    case 'SET_FORMIK_STATE':\n      return { ...state, ...msg.payload };\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function useFormik<Values = object>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  isInitialValid = false,\n  enableReinitialize = false,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = { validateOnChange, validateOnBlur, isInitialValid, ...rest };\n  const initialValues = React.useRef(props.initialValues);\n  const isMounted = React.useRef<boolean>(false);\n  const fields = React.useRef<{\n    [field: string]: {\n      validate: (value: any) => string | Promise<string> | undefined;\n    };\n  }>({});\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: {},\n    touched: {},\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidationAsEffect = React.useCallback(\n    () => {\n      const [validate, cancel] = makeCancelable(validateForm(state.values));\n      validate.then(x => x).catch(x => x); // catch the rejection silently\n      return cancel;\n    },\n    [state.values]\n  );\n\n  React.useEffect(\n    () => {\n      if (!!validateOnChange && !state.isSubmitting && isMounted.current) {\n        return runValidationAsEffect();\n      }\n      return;\n    },\n    [state.values]\n  );\n\n  React.useEffect(\n    () => {\n      if (!!validateOnBlur && !state.isSubmitting && isMounted.current) {\n        return runValidationAsEffect();\n      }\n      return;\n    },\n    [state.touched]\n  );\n\n  React.useEffect(\n    () => {\n      if (\n        enableReinitialize &&\n        isMounted.current &&\n        !isEqual(initialValues.current, props.initialValues)\n      ) {\n        initialValues.current = props.initialValues;\n        resetForm(props.initialValues);\n      }\n    },\n    [props.initialValues]\n  );\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const imperativeMethods = {\n    resetForm,\n    submitForm,\n    validateForm,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n  };\n\n  function registerField(name: string, { validate }: any) {\n    if (fields.current !== null) {\n      fields.current[name] = {\n        validate,\n      };\n    }\n  }\n\n  function unregisterField(name: string) {\n    if (fields.current !== null) {\n      delete fields.current[name];\n    }\n  }\n\n  function handleBlur(eventOrString: any): void | ((e: any) => void) {\n    if (isString(eventOrString)) {\n      return event => executeBlur(event, eventOrString);\n    } else {\n      executeBlur(eventOrString);\n    }\n\n    function executeBlur(e: any, path?: string) {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: { field, value: true },\n      });\n    }\n  }\n\n  function handleChange(\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) {\n    if (isString(eventOrPath)) {\n      return event => executeChange(event, eventOrPath);\n    } else {\n      executeChange(eventOrPath);\n    }\n\n    function executeChange(\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        dispatch({ type: 'SET_FIELD_VALUE', payload: { field, value: val } });\n      }\n    }\n  }\n\n  function handleReset() {\n    if (props.onReset) {\n      const maybePromisedOnReset = (props.onReset as any)(\n        state.values,\n        imperativeMethods\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(resetForm);\n      } else {\n        resetForm();\n      }\n    } else {\n      resetForm();\n    }\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement> | undefined) {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type'),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    submitForm();\n  }\n\n  function executeSubmit() {\n    return props.onSubmit(state.values, imperativeMethods);\n  }\n\n  function resetForm(nextValues?: Values) {\n    const values = nextValues\n      ? nextValues\n      : initialValues.current !== null\n        ? initialValues.current\n        : props.initialValues;\n    initialValues.current = values;\n    dispatch({\n      type: 'RESET_FORM',\n      payload: {\n        isSubmitting: false,\n        errors: {},\n        touched: {},\n        status: undefined,\n        values,\n        isValidating: false,\n        submitCount: 0,\n      },\n    });\n  }\n\n  function setTouched(touched: FormikTouched<Values>) {\n    dispatch({ type: 'SET_TOUCHED', payload: touched });\n  }\n\n  function setErrors(errors: FormikErrors<Values>) {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }\n\n  function setValues(values: Values) {\n    dispatch({ type: 'SET_VALUES', payload: values });\n  }\n\n  function setFieldError(field: string, value: string | undefined) {\n    dispatch({\n      type: 'SET_FIELD_ERROR',\n      payload: { field, value },\n    });\n  }\n\n  function setFieldValue(\n    field: string,\n    value: any\n    // shouldValidate: boolean = true\n  ) {\n    dispatch({\n      type: 'SET_FIELD_VALUE',\n      payload: {\n        field,\n        value,\n      },\n    });\n  }\n\n  function setFieldTouched(\n    field: string,\n    touched: boolean = true\n    // shouldValidate: boolean = true\n  ) {\n    dispatch({\n      type: 'SET_FIELD_TOUCHED',\n      payload: {\n        field,\n        value: touched,\n      },\n    });\n  }\n\n  function validateField(name: string) {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fields.current !== null &&\n      fields.current[name] &&\n      fields.current[name].validate &&\n      isFunction(fields.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fields.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x, (e: any) => e)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  function runValidateHandler(\n    values: Values,\n    field?: string\n  ): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (props.validate as any)(values, field);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  function runValidationSchema(values: Values, field?: string) {\n    return new Promise(resolve => {\n      const { validationSchema } = props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      let promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      promise.then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  }\n\n  function runSingleFieldLevelValidation(\n    field: string,\n    value: void | string\n  ): Promise<string> {\n    return new Promise(resolve =>\n      resolve(fields.current[field].validate(value))\n    ).then(x => x, e => e);\n  }\n\n  function runFieldLevelValidations(\n    values: Values\n  ): Promise<FormikErrors<Values>> {\n    if (fields.current === null) {\n      return Promise.resolve({});\n    }\n    const fieldKeysWithValidation: string[] = Object.keys(\n      fields.current\n    ).filter(\n      f =>\n        fields.current !== null &&\n        fields.current[f] &&\n        fields.current[f].validate &&\n        isFunction(fields.current[f].validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  function validateForm(\n    values: Values = state.values\n  ): Promise<FormikErrors<Values>> {\n    if (\n      props.validationSchema ||\n      props.validate ||\n      (fields.current &&\n        Object.keys(fields.current).filter(\n          key => !!fields.current[key].validate\n        ).length > 0)\n    ) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        if (!isEqual(state.errors, combinedErrors)) {\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        return combinedErrors;\n      });\n    } else {\n      return Promise.resolve({});\n    }\n  }\n\n  function setFormikState(\n    stateOrCb:\n      | FormikState<Values>\n      | ((state: FormikState<Values>) => FormikState<Values>)\n  ): void {\n    if (isFunction(stateOrCb)) {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb(state) });\n    } else {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n    }\n  }\n\n  function setStatus(status: any) {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }\n\n  function setSubmitting(isSubmitting: boolean) {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }\n\n  function submitForm() {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateForm().then((combinedErrors: FormikErrors<Values>) => {\n      const isActuallyValid = Object.keys(combinedErrors).length === 0;\n      if (isActuallyValid) {\n        Promise.resolve(executeSubmit())\n          .then(() => {\n            if (isMounted.current) {\n              dispatch({ type: 'SUBMIT_SUCCESS' });\n            }\n          })\n          .catch(_errors => {\n            if (isMounted.current) {\n              dispatch({ type: 'SUBMIT_FAILURE' });\n            }\n          });\n      } else if (isMounted.current) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        dispatch({ type: 'SUBMIT_FAILURE' });\n      }\n    });\n  }\n\n  function getFieldProps<Val = any>(\n    name: string,\n    type: string\n  ): [FieldInputProps<Val>, FieldMetaProps<Val>] {\n    const field = {\n      name,\n      value:\n        type && (type === 'radio' || type === 'checkbox')\n          ? undefined // React uses checked={} for these inputs\n          : getIn(state.values, name),\n      onChange: handleChange,\n      onBlur: handleBlur,\n    };\n\n    return [field, getFieldMeta<Val>(name)];\n  }\n\n  function getFieldMeta<Val = any>(name: string): FieldMetaProps<Val> {\n    return {\n      value: getIn(state.values, name),\n      error: getIn(state.errors, name),\n      touched: !!getIn(state.touched, name),\n      initialValue: getIn(initialValues.current, name),\n    };\n  }\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      dirty\n        ? state.errors && Object.keys(state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean),\n    [state.errors, dirty, isInitialValid]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current || props.initialValues,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    validateOnBlur,\n    validateOnChange,\n  };\n\n  return ctx;\n}\n\nexport function Formik<Values = object, ExtraProps = {}>(\n  props: FormikConfig<Values> & ExtraProps\n) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render } = props;\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n          ? render(formikbag)\n          : children // children come last, always called\n            ? isFunction(children)\n              ? (children as ((bag: FormikProps<Values>) => React.ReactNode))(\n                  formikbag as FormikProps<Values>\n                )\n              : !isEmptyChildren(children)\n                ? React.Children.only(children)\n                : null\n            : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren } from './utils';\nimport warning from 'tiny-warning';\n\nexport interface FieldProps<V = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   * @deprecated\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | React.ComponentType<FieldProps<any>['field']>\n    | keyof JSX.IntrinsicElements\n    | React.ComponentType;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\nexport function useField<Val = any>(name: string, type?: string) {\n  const formik = useFormikContext();\n\n  warning(\n    formik,\n    'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n  );\n\n  return formik.getFieldProps<Val>(name, type);\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is = 'input', // `as` is reserved in typescript lol\n  component,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n    ...formik\n  } = useFormikContext();\n\n  warning(\n    !!render,\n    `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, \n        replace \n          <Field name=\"${name}\" render={({field, form}) => ...} />\n        with\n          <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>\n    `\n  );\n\n  warning(\n    !!component,\n    '<Field component> has been deprecated and will be removed in future versions of Formik. Use <Formik as> instead. Note that with the `as` prop, all props are passed directly through and not grouped in `field` object key.'\n  );\n\n  warning(\n    !!is && !!children && isFunction(children),\n    'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n  );\n\n  warning(\n    !!component && children && isFunction(children),\n    'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n  );\n\n  warning(\n    !!render && !!children && !isEmptyChildren(children),\n    'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n  );\n\n  React.useEffect(\n    () => {\n      formik.registerField(name, {\n        validate: validate,\n      });\n      return () => {\n        formik.unregisterField(name);\n      };\n    },\n    [name, validate]\n  );\n  const [field, meta] = formik.getFieldProps(name, props.type);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render(legacyBag);\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props },\n      children\n    );\n  }\n\n  if (typeof is === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      is,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n\n  return React.createElement(is, { ...field, ...props }, children);\n}\nexport const FastField = Field;\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport function Form(props: FormikFormProps) {\n  const { handleReset, handleSubmit } = useFormikContext();\n  return <form onSubmit={handleSubmit} onReset={handleReset} {...props} />;\n}\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContext } from './types';\nimport { FormikConsumer } from './FormikContext';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics<\n    React.ComponentType<OuterProps>,\n    React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  );\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<\n      React.ComponentType<OuterProps>,\n      React.ComponentType<OuterProps & FormikProps<Values>>\n    >(C, Component) as React.ComponentClass<OuterProps>;\n  };\n}\n"],"names":["getIn","obj","key","def","p","path","toPath","length","undefined","setIn","value","res","resVal","i","pathArray","currentPath","currentObj","slice","cloneDeep","nextPath","isInteger","Number","result","setNestedObjectValues","object","visited","response","WeakMap","_a","Object","keys","_i","k","val","isObject","get","set","Array","isArray","isFunction","String","Math","floor","isString","prototype","toString","call","isEmptyChildren","children","React.Children","count","isPromise","then","makeCancelable","promise","hasCanceled","Promise","resolve","reject","isCanceled","error","PrivateFormikContext","React.createContext","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","React.useContext","formikReducer","state","msg","type","values","payload","touched","errors","status","isSubmitting","isValidating","field","submitCount","useFormik","_b","validateOnChange","_c","validateOnBlur","_d","isInitialValid","_e","enableReinitialize","rest","props","initialValues","React.useRef","isMounted","fields","_f","dispatch","runValidationAsEffect","React.useCallback","cancel","x","catch","React.useEffect","current","isEqual","resetForm","imperativeMethods","submitForm","validateForm","validateField","setErrors","setFieldError","setFieldTouched","setFieldValue","setStatus","setSubmitting","setTouched","setValues","setFormikState","handleBlur","eventOrString","event","executeBlur","e","persist","name","handleChange","eventOrPath","executeChange","eventOrTextValue","maybePath","parsed","name_1","checked","test","parseFloat","isNaN","nextValues","validate","maybePromise","runValidateHandler","maybePromisedErrors","runValidationSchema","validationSchema","schema","validateAt","validateYupSchema","err","yupToFormErrors","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","prev","curr","index","combinedErrors","deepmerge","arrayMerge","stateOrCb","onSubmit","_errors","getFieldMeta","initialValue","dirty","React.useMemo","isValid","handleReset","onReset","maybePromisedOnReset","handleSubmit","preventDefault","unregisterField","registerField","getFieldProps","onChange","onBlur","Formik","formikbag","component","render","React.createElement","only","yupError","inner","message","sync","context","validateData","hasOwnProperty","abortEarly","target","source","options","destination","forEach","shouldClone","clone","isMergeableObject","indexOf","push","Field","is","formik","warning","meta","legacyBag","form","innerRef","ref","FastField","Form","connect","Comp","C","componentDisplayName","displayName","constructor","WrappedComponent","hoistNonReactStatics","move","array","from","to","copy","splice","swap","indexA","indexB","a","insert","replace","FieldArray","_super","_this","fn","alterTouched","alterErrors","prevState","updateErrors","updateTouched","updateArrayField","arr","unshift","remove","pop","bind","tslib_1.__extends","FieldArrayInner","this","tmp","arrayHelpers","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","restOfFormik","React.Component","ErrorMessage","ErrorMessageImpl","touch","mapPropsToValues","config","Component","actions","formikProps","initialStatus","mapPropsToStatus","renderFormComponent","doc","document","activeElement","body"],"mappings":"8XAOgBA,EACdC,EACAC,EACAC,EACAC,gBAAAA,KAGA,IADA,IAAMC,EAAOC,EAAOJ,GACbD,GAAOG,EAAIC,EAAKE,QACrBN,EAAMA,EAAII,EAAKD,MAEjB,YAAeI,IAARP,EAAoBE,EAAMF,EAOnC,SAAgBQ,EAAMR,EAAUI,EAAcK,GAM5C,IALA,IAAIC,EAAW,GACXC,EAAcD,EACdE,EAAI,EACJC,EAAYR,EAAOD,GAEhBQ,EAAIC,EAAUP,OAAS,EAAGM,IAAK,CACpC,IAAME,EAAsBD,EAAUD,GAClCG,EAAkBhB,EAAMC,EAAKa,EAAUG,MAAM,EAAGJ,EAAI,IAExD,GAAID,EAAOG,GACTH,EAASA,EAAOG,QACX,GAAIC,EACTJ,EAASA,EAAOG,GAAeG,EAAUF,OACpC,CACL,IAAMG,EAAmBL,EAAUD,EAAI,GACvCD,EAASA,EAAOG,GACdK,EAAUD,IAAaE,OAAOF,IAAa,EAAI,GAAK,IAK1D,IAAW,IAANN,EAAUZ,EAAMW,GAAQE,EAAUD,MAAQH,EAC7C,OAAOT,OAGKO,IAAVE,SACKE,EAAOE,EAAUD,IAExBD,EAAOE,EAAUD,IAAMH,EAGzB,IAAMY,gBAAcrB,EAAQU,GAQ5B,OAJU,IAANE,QAAqBL,IAAVE,UACNY,EAAOR,EAAUD,IAGnBS,EAUT,SAAgBC,EACdC,EACAd,EACAe,EACAC,gBADAD,MAAmBE,sBACnBD,MAEA,IAAc,QAAAE,EAAAC,OAAOC,KAAKN,GAAZO,WAAAA,IAAqB,CAA9B,IAAIC,OACDC,EAAMT,EAAOQ,GACfE,EAASD,GACNR,EAAQU,IAAIF,KACfR,EAAQW,IAAIH,GAAK,GAIjBP,EAASM,GAAKK,MAAMC,QAAQL,GAAO,GAAK,GACxCV,EAAsBU,EAAKvB,EAAOe,EAASC,EAASM,KAGtDN,EAASM,GAAKtB,EAIlB,OAAOgB,MAMIa,EAAa,SAACtC,GACzB,MAAe,mBAARA,GAGIiC,EAAW,SAACjC,GACvB,OAAQ,OAARA,GAA+B,iBAARA,GAGZmB,EAAY,SAACnB,GACxB,OAAAuC,OAAOC,KAAKC,MAAMrB,OAAOpB,OAAWA,GAGzB0C,EAAW,SAAC1C,GACvB,MAAwC,oBAAxC4B,OAAOe,UAAUC,SAASC,KAAK7C,IAMpB8C,EAAkB,SAACC,GAC9B,OAAmC,IAAnCC,WAAeC,MAAMF,IAGVG,EAAY,SAACzC,GACxB,OAAAwB,EAASxB,IAAU6B,EAAW7B,EAAM0C,gBA6BtBC,EACdC,GAEA,IAAIC,GAAuB,EAS3B,MAAO,CAPqB,IAAIC,QAAQ,SAACC,EAASC,GAChDJ,EAAQF,KACN,SAAAnB,GAAO,OAACsB,EAAcG,EAAO,CAAEC,YAAY,IAAUF,EAAQxB,IAC7D,SAAA2B,GAAS,OAAeF,EAAdH,EAAqB,CAAEI,YAAY,GAAiBC,OAMhE,WACEL,GAAc,ICvKpB,IAAMM,EAAuBC,gBAAwC,IACxDC,EAAiBF,EAAqBG,SACtCC,EAAiBJ,EAAqBK,SAEnD,SAAgBC,IACd,OAAOC,aAAwCP,GCqCjD,SAASQ,EACPC,EACAC,GAEA,OAAQA,EAAIC,MACV,IAAK,aACH,qBAAYF,GAAOG,OAAQF,EAAIG,UACjC,IAAK,cACH,qBAAYJ,GAAOK,QAASJ,EAAIG,UAClC,IAAK,aACH,qBAAYJ,GAAOM,OAAQL,EAAIG,UACjC,IAAK,aACH,qBAAYJ,GAAOO,OAAQN,EAAIG,UACjC,IAAK,mBACH,qBAAYJ,GAAOQ,aAAcP,EAAIG,UACvC,IAAK,mBACH,qBAAYJ,GAAOS,aAAcR,EAAIG,UACvC,IAAK,kBACH,qBACKJ,GACHG,OAAQhE,EAAM6D,EAAMG,OAAQF,EAAIG,QAAQM,MAAOT,EAAIG,QAAQhE,SAE/D,IAAK,oBACH,qBACK4D,GACHK,QAASlE,EAAM6D,EAAMK,QAASJ,EAAIG,QAAQM,MAAOT,EAAIG,QAAQhE,SAEjE,IAAK,kBACH,qBACK4D,GACHM,OAAQnE,EAAM6D,EAAMM,OAAQL,EAAIG,QAAQM,MAAOT,EAAIG,QAAQhE,SAE/D,IAAK,aACL,IAAK,mBACH,qBAAY4D,EAAUC,EAAIG,SAC5B,IAAK,iBACH,qBACKJ,GACHK,QAASpD,EACP+C,EAAMG,QACN,GAEFK,cAAc,EACdG,YAAaX,EAAMW,YAAc,IAErC,IAAK,iBAKL,IAAK,iBACH,qBACKX,GACHQ,cAAc,IAElB,QACE,OAAOR,YAIGY,EAA2BtD,GACzC,IAAAuD,qBAAAC,gBACAC,mBAAAC,gBACAC,mBAAAC,gBACAC,uBAAAC,gBACAC,0FAEMC,cAAUR,mBAAkBE,iBAAgBE,kBAAmBG,GAC/DE,EAAgBC,SAAaF,EAAMC,eACnCE,EAAYD,UAAsB,GAClCE,EAASF,SAIZ,IACGG,8GAAC3B,OAAO4B,OAWRC,EAAwBC,cAC5B,WACQ,IAAAxE,iBAAWyE,OAEjB,YADSjD,KAAK,SAAAkD,GAAK,OAAAA,IAAGC,MAAM,SAAAD,GAAK,OAAAA,IAC1BD,GAET,CAAC/B,EAAMG,SAGT+B,YACE,WACE,GAAMpB,IAAqBd,EAAMQ,cAAgBiB,EAAUU,QACzD,OAAON,KAIX,CAAC7B,EAAMG,SAGT+B,YACE,WACE,GAAMlB,IAAmBhB,EAAMQ,cAAgBiB,EAAUU,QACvD,OAAON,KAIX,CAAC7B,EAAMK,UAGT6B,YACE,WAEId,GACAK,EAAUU,UACTC,EAAQb,EAAcY,QAASb,EAAMC,iBAEtCA,EAAcY,QAAUb,EAAMC,cAC9Bc,EAAUf,EAAMC,iBAGpB,CAACD,EAAMC,gBAGTW,YAAgB,WAGd,OAFAT,EAAUU,SAAU,EAEb,WACLV,EAAUU,SAAU,IAErB,IAEH,IAAMG,EAAoB,CACxBD,YACAE,aACAC,eACAC,gBACAC,YACAC,gBACAC,kBACAC,gBACAC,YACAC,gBACAC,aACAC,YACAC,kBAiBF,SAASC,EAAWC,GAClB,GAAI/E,EAAS+E,GACX,OAAO,SAAAC,GAAS,OAAAC,EAAYD,EAAOD,IAKrC,SAASE,EAAYC,EAAQxH,GACvBwH,EAAEC,SACJD,EAAEC,UAEE,IAAAlG,WAAEmG,SACF/C,EAAQ3E,IAAc0H,SAU5B7B,EAAS,CACP1B,KAAM,oBACNE,QAAS,CAAEM,QAAOtE,OAAO,KApB3BkH,EAAYF,GAyBhB,SAASM,EACPC,GAEA,GAAItF,EAASsF,GACX,OAAO,SAAAN,GAAS,OAAAO,EAAcP,EAAOM,IAKvC,SAASC,EACPC,EACAC,GAKA,IAEIC,EAFArD,EAAQoD,EACRnG,EAAMkG,EAIV,IAAKxF,EAASwF,GAAmB,CAG1BA,EAA4CL,SAC9CK,EAA4CL,UAEzC,IAAAlG,WACJ4C,SACA8D,SAEA5H,UACA6H,YAGFvD,EAAQoD,IAAwBE,SAQhCrG,EAAM,eAAeuG,KAAKhE,IACpB6D,EAASI,WAAW/H,GAASgI,MAAML,GAAU,GAAKA,GACpD,WAAWG,KAAKhE,GAAQ+D,EAAU7H,EAGpCsE,GAEFkB,EAAS,CAAE1B,KAAM,kBAAmBE,QAAS,CAAEM,QAAOtE,MAAOuB,KA5C/DiG,EAAcD,GAoGlB,SAAStB,EAAUgC,GACjB,IAAMlE,EAASkE,IAEe,OAA1B9C,EAAcY,QACZZ,EAAcY,QACdb,EAAMC,eACZA,EAAcY,QAAUhC,EACxByB,EAAS,CACP1B,KAAM,aACNE,QAAS,CACPI,cAAc,EACdF,OAAQ,GACRD,QAAS,GACTE,YAAQrE,EACRiE,SACAM,cAAc,EACdE,YAAa,KAKnB,SAASqC,EAAW3C,GAClBuB,EAAS,CAAE1B,KAAM,cAAeE,QAASC,IAG3C,SAASqC,EAAUpC,GACjBsB,EAAS,CAAE1B,KAAM,aAAcE,QAASE,IAG1C,SAAS2C,EAAU9C,GACjByB,EAAS,CAAE1B,KAAM,aAAcE,QAASD,IAG1C,SAASwC,EAAcjC,EAAetE,GACpCwF,EAAS,CACP1B,KAAM,kBACNE,QAAS,CAAEM,QAAOtE,WAItB,SAASyG,EACPnC,EACAtE,GAGAwF,EAAS,CACP1B,KAAM,kBACNE,QAAS,CACPM,QACAtE,WAKN,SAASwG,EACPlC,EACAL,gBAAAA,MAGAuB,EAAS,CACP1B,KAAM,oBACNE,QAAS,CACPM,QACAtE,MAAOiE,KAKb,SAASoC,EAAcgB,GAKrB,GACqB,OAAnB/B,EAAOS,SACPT,EAAOS,QAAQsB,IACf/B,EAAOS,QAAQsB,GAAMa,UACrBrG,EAAWyD,EAAOS,QAAQsB,GAAMa,UAChC,CACA,IAAMlI,EAAQV,EAAMsE,EAAMG,OAAQsD,GAC5Bc,EAAe7C,EAAOS,QAAQsB,GAAMa,SAASlI,GACnD,OAAIyC,EAAU0F,IAEZ3C,EAAS,CAAE1B,KAAM,mBAAoBE,SAAS,IACvCmE,EACJzF,KAAK,SAACkD,GAAW,OAAAA,GAAG,SAACuB,GAAW,OAAAA,IAChCzE,KAAK,SAACQ,GACLsC,EAAS,CACP1B,KAAM,kBACNE,QAAS,CAAEM,MAAO+C,EAAMrH,MAAOkD,KAEjCsC,EAAS,CAAE1B,KAAM,mBAAoBE,SAAS,QAGlDwB,EAAS,CACP1B,KAAM,kBACNE,QAAS,CACPM,MAAO+C,EACPrH,MAAOmI,KAGJrF,QAAQC,QAAQoF,IAGzB,OAAOrF,QAAQC,UAInB,SAASqF,EACPrE,EACAO,GAEA,OAAO,IAAIxB,QAAQ,SAAAC,GACjB,IAAMsF,EAAuBnD,EAAMgD,SAAiBnE,EAAQO,QAChCxE,IAAxBuI,EACFtF,EAAQ,IACCN,EAAU4F,GAClBA,EAAqC3F,KACpC,WACEK,EAAQ,KAEV,SAAAmB,GACEnB,EAAQmB,KAIZnB,EAAQsF,KAQd,SAASC,EAAoBvE,EAAgBO,GAC3C,OAAO,IAAIxB,QAAQ,SAAAC,GACT,IAAAwF,qBACFC,EAAS3G,EAAW0G,GACtBA,EAAiBjE,GACjBiE,GAEFjE,GAASkE,EAAOC,WACZD,EAAOC,WAAWnE,EAAOP,GACzB2E,EAAkB3E,EAAQyE,IACxB9F,KACN,WACEK,EAAQ,KAEV,SAAC4F,GACC5F,EAAQ6F,EAAgBD,QAehC,SAASE,EACP9E,GAEA,GAAuB,OAAnBuB,EAAOS,QACT,OAAOjD,QAAQC,QAAQ,IAEzB,IAAM+F,EAAoC3H,OAAOC,KAC/CkE,EAAOS,SACPgD,OACA,SAAAC,GACE,OAAmB,OAAnB1D,EAAOS,SACPT,EAAOS,QAAQiD,IACf1D,EAAOS,QAAQiD,GAAGd,UAClBrG,EAAWyD,EAAOS,QAAQiD,GAAGd,YAI3Be,EACJH,EAAwBjJ,OAAS,EAC7BiJ,EAAwBI,IAAI,SAAAF,GAC1B,OA5BR1E,EA4BsC0E,EA3BtChJ,EA2ByCV,EAAMyE,EAAQiF,GAzBhD,IAAIlG,QAAQ,SAAAC,GACjB,OAAAA,EAAQuC,EAAOS,QAAQzB,GAAO4D,SAASlI,MACvC0C,KAAK,SAAAkD,GAAK,OAAAA,GAAG,SAAAuB,GAAK,OAAAA,IANtB,IACE7C,EACAtE,IA6BM,CAAC8C,QAAQC,QAAQ,oCAEvB,OAAOD,QAAQqG,IAAIF,GAAkBvG,KAAK,SAAC0G,GACzC,OAAAA,EAAgBC,OACd,SAACC,EAAMC,EAAMC,GACX,MAAa,oCAATD,EACKD,GAEHC,IACJD,EAAOvJ,EAAMuJ,EAAMR,EAAwBU,GAAQD,IAE9CD,IAET,MAQN,SAASlD,EACPrC,GAEA,oBAFAA,EAAiBH,EAAMG,QAGrBmB,EAAMqD,kBACNrD,EAAMgD,UACL5C,EAAOS,SACN5E,OAAOC,KAAKkE,EAAOS,SAASgD,OAC1B,SAAAvJ,GAAO,QAAE8F,EAAOS,QAAQvG,GAAK0I,WAC7BrI,OAAS,GAEb2F,EAAS,CAAE1B,KAAM,mBAAoBE,SAAS,IACvClB,QAAQqG,IAAI,CACjBN,EAAyB9E,GACzBmB,EAAMqD,iBAAmBD,EAAoBvE,GAAU,GACvDmB,EAAMgD,SAAWE,EAAmBrE,GAAU,KAC7CrB,KAAK,SAACxB,OACDuI,EAAiBC,EAAUP,IAC/B,iBACA,CAAEQ,eAMJ,OAJK3D,EAAQpC,EAAMM,OAAQuF,IACzBjE,EAAS,CAAE1B,KAAM,aAAcE,QAASyF,IAE1CjE,EAAS,CAAE1B,KAAM,mBAAoBE,SAAS,IACvCyF,KAGF3G,QAAQC,QAAQ,IAI3B,SAAS+D,EACP8C,GAII/H,EAAW+H,GACbpE,EAAS,CAAE1B,KAAM,mBAAoBE,QAAS4F,EAAUhG,KAExD4B,EAAS,CAAE1B,KAAM,mBAAoBE,QAAS4F,IAIlD,SAASlD,EAAUvC,GACjBqB,EAAS,CAAE1B,KAAM,aAAcE,QAASG,IAG1C,SAASwC,EAAcvC,GACrBoB,EAAS,CAAE1B,KAAM,mBAAoBE,QAASI,IAGhD,SAAS+B,IAEP,OADAX,EAAS,CAAE1B,KAAM,mBACVsC,IAAe1D,KAAK,SAAC+G,GACqC,IAAvCtI,OAAOC,KAAKqI,GAAgB5J,OAElDiD,QAAQC,QA3QLmC,EAAM2E,SAASjG,EAAMG,OAAQmC,IA4Q7BxD,KAAK,WACA2C,EAAUU,SACZP,EAAS,CAAE1B,KAAM,qBAGpB+B,MAAM,SAAAiE,GACDzE,EAAUU,SACZP,EAAS,CAAE1B,KAAM,qBAGduB,EAAUU,SAEnBP,EAAS,CAAE1B,KAAM,qBAsBvB,SAASiG,EAAwB1C,GAC/B,MAAO,CACLrH,MAAOV,EAAMsE,EAAMG,OAAQsD,GAC3BnE,MAAO5D,EAAMsE,EAAMM,OAAQmD,GAC3BpD,UAAW3E,EAAMsE,EAAMK,QAASoD,GAChC2C,aAAc1K,EAAM6F,EAAcY,QAASsB,IAI/C,IAAM4C,EAAQC,UACZ,WAAM,OAAClE,EAAQb,EAAcY,QAASnC,EAAMG,SAC5C,CAACoB,EAAcY,QAASnC,EAAMG,SAG1BoG,EAAUD,UACd,WACE,OAAAD,EACIrG,EAAMM,QAA+C,IAArC/C,OAAOC,KAAKwC,EAAMM,QAAQrE,QACvB,IAAnBiF,GAA4BjD,EAAWiD,GACpCA,EAA4DI,GAC5DJ,GACT,CAAClB,EAAMM,OAAQ+F,EAAOnF,IAgCxB,qBA5BKlB,GACHuB,cAAeA,EAAcY,SAAWb,EAAMC,cAC9C4B,aACAO,eACA8C,YA3XF,WACE,GAAIlF,EAAMmF,QAAS,CACjB,IAAMC,EAAwBpF,EAAMmF,QAClCzG,EAAMG,OACNmC,GAGEzD,EAAU6H,GACXA,EAAsC5H,KAAKuD,GAE5CA,SAGFA,KA+WFsE,aA3WF,SAAsBpD,GAChBA,GAAKA,EAAEqD,gBACTrD,EAAEqD,iBAyBJrE,KAiVAF,YACAK,YACAQ,iBACAN,kBACAC,gBACAF,gBACAG,YACAC,gBACAC,aACAC,YACAV,aACAC,eACAC,gBACA8D,UACAF,QACAQ,gBAteF,SAAyBpD,GACA,OAAnB/B,EAAOS,gBACFT,EAAOS,QAAQsB,IAqexBqD,cA/eF,SAAuBrD,EAAcnG,GACZ,OAAnBoE,EAAOS,UACTT,EAAOS,QAAQsB,GAAQ,CACrBa,uBA6eJyC,cAjEF,SACEtD,EACAvD,GAYA,MAAO,CAVO,CACZuD,OACArH,OACE8D,GAAkB,UAATA,GAA6B,aAATA,EAEzBxE,EAAMsE,EAAMG,OAAQsD,QADpBvH,EAEN8K,SAAUtD,EACVuD,OAAQ9D,GAGKgD,EAAkB1C,KAoDjCzC,iBACAF,8BAMYoG,EACd5F,GAEA,IAAM6F,EAAYvG,EAAkBU,GAC5B8F,cAAW1I,aAAU2I,WAC7B,OACEC,gBAAC7H,GAAerD,MAAO+K,GACpBC,EACGE,gBAAoBF,EAAkBD,GACtCE,EACEA,EAAOF,GACPzI,EACET,EAAWS,GACRA,EACCyI,GAED1I,EAAgBC,GAEf,KADAC,WAAe4I,KAAK7I,GAExB,eAyBEsG,EAAwBwC,GACtC,IAAIlH,EAAc,GAClB,GAA8B,IAA1BkH,EAASC,MAAMxL,OACjB,OAAOE,EAAMmE,EAAQkH,EAASzL,KAAMyL,EAASE,SAE/C,IAAgB,QAAApK,EAAAkK,EAASC,MAAThK,WAAAA,IAAgB,CAA3B,IAAIsH,OACFzE,EAAOyE,EAAIhJ,QACduE,EAASnE,EAAMmE,EAAQyE,EAAIhJ,KAAMgJ,EAAI2C,UAGzC,OAAOpH,EAMT,SAAgBwE,EACd3E,EACAyE,EACA+C,EACAC,gBADAD,mBACAC,MAEA,IAAIC,EAA2B,GAC/B,IAAK,IAAInK,KAAKyC,EACZ,GAAIA,EAAO2H,eAAepK,GAAI,CAC5B,IAAM9B,EAAMsC,OAAOR,GACnBmK,EAAajM,GAAuB,KAAhBuE,EAAOvE,GAAcuE,EAAOvE,QAAOM,EAG3D,OAAO0I,EAAO+C,EAAO,eAAiB,YAAYE,EAAc,CAC9DE,YAAY,EACZH,QAASA,IAQb,SAAS7B,EAAWiC,EAAeC,EAAeC,GAChD,IAAMC,EAAcH,EAAOrL,QAe3B,OAbAsL,EAAOG,QAAQ,SAAS7E,EAAQhH,GAC9B,QAA8B,IAAnB4L,EAAY5L,GAAoB,CACzC,IACM8L,GADmC,IAAlBH,EAAQI,OACOJ,EAAQK,kBAAkBhF,GAChE4E,EAAY5L,GAAK8L,EACbvC,EAAU/H,MAAMC,QAAQuF,GAAK,GAAK,GAAIA,EAAG2E,GACzC3E,OACK2E,EAAQK,kBAAkBhF,GACnC4E,EAAY5L,GAAKuJ,EAAUkC,EAAOzL,GAAIgH,EAAG2E,IACT,IAAvBF,EAAOQ,QAAQjF,IACxB4E,EAAYM,KAAKlF,KAGd4E,WCltBOO,EAAMpL,GACpB,IAAAgH,aACAb,SACA4D,WACA3I,aACAmC,OAAA8H,uBACAvB,cACA9F,uEAEMP,MAGJ6H,8CAGFC,IACIxB,EACF,6MAEqB5D,gFAEAA,oDAIvBoF,IACIzB,EACF,+NAGFyB,IACIF,KAAQjK,GAAYT,EAAWS,GACjC,+HAGFmK,IACIzB,GAAa1I,GAAYT,EAAWS,GACtC,+HAGFmK,IACIxB,KAAY3I,IAAaD,EAAgBC,GAC3C,0HAGFwD,YACE,WAIE,OAHA0G,EAAO9B,cAAcrD,EAAM,CACzBa,SAAUA,IAEL,WACLsE,EAAO/B,gBAAgBpD,KAG3B,CAACA,EAAMa,IAEH,IAAArD,4BAACP,OAAOoI,OACRC,EAAY,CAAErI,QAAOsI,KAAMJ,GAEjC,GAAIvB,EACF,OAAOA,EAAO0B,GAGhB,GAAI9K,EAAWS,GACb,OAAOA,gBAAcqK,GAAWD,UAGlC,GAAI1B,EAAW,CAEb,GAAyB,iBAAdA,EAAwB,CACzB,IAAA6B,aAAU5H,2BAClB,OAAOiG,gBACLF,cACE8B,IAAKD,GAAavI,EAAUW,GAC9B3C,GAIJ,OAAO4I,gBACLF,cACE1G,QAAOsI,KAAMJ,GAAWtH,GAC1B5C,GAIJ,GAAkB,iBAAPiK,EAAiB,CAClBM,aAAU5H,2BAClB,OAAOiG,gBACLqB,cACEO,IAAKD,GAAavI,EAAUW,GAC9B3C,GAIJ,OAAO4I,gBAAoBqB,gBAASjI,EAAUY,GAAS5C,GAEzD,IAAayK,EAAYT,WCpKTU,EAAK9H,GACb,IAAAhE,MACN,OAAOgK,mCAAMrB,wBAAwBQ,uBAA0BnF,aCHjD+H,EACdC,GAEA,IAAMC,EAA2B,SAACjI,GAAsB,OACtDgG,gBAAC3H,OACE,SAAAiJ,GAAU,OAAAtB,gBAACgC,gBAAShI,GAAOsH,OAAQA,QAGlCY,EACJF,EAAKG,aACLH,EAAK7F,MACJ6F,EAAKI,aAAeJ,EAAKI,YAAYjG,MACtC,YAUF,OANC8F,EAEEI,iBAAmBL,EAEtBC,EAAEE,YAAc,iBAAiBD,MAE1BI,EAILL,EACAD,GDrBJF,EAAKK,YAAc,WE4CNI,EAAO,SAACC,EAAcC,EAAcC,GAC/C,IAAMC,GAAYH,GAAS,YACrB1N,EAAQ6N,EAAKF,GAGnB,OAFAE,EAAKC,OAAOH,EAAM,GAClBE,EAAKC,OAAOF,EAAI,EAAG5N,GACZ6N,GAGIE,EAAO,SAACL,EAAcM,EAAgBC,GACjD,IAAMJ,GAAYH,GAAS,YACrBQ,EAAIL,EAAKG,GAGf,OAFAH,EAAKG,GAAUH,EAAKI,GACpBJ,EAAKI,GAAUC,EACRL,GAGIM,EAAS,SAACT,EAAclE,EAAexJ,GAClD,IAAM6N,GAAYH,GAAS,YAE3B,OADAG,EAAKC,OAAOtE,EAAO,EAAGxJ,GACf6N,GAGIO,EAAU,SAACV,EAAclE,EAAexJ,GACnD,IAAM6N,GAAYH,GAAS,YAE3B,OADAG,EAAKrE,GAASxJ,EACP6N,GAyOIQ,EAAapB,cA/NxB,WAAY/H,GAAZ,MACEoJ,YAAMpJ,gBAORqJ,mBAAmB,SACjBC,EACAC,EACAC,GAEM,IAAAxN,UACJmG,SACA3C,qBACAD,WAA0B2B,kBAE5BU,oBACE,SAAC6H,GACC,IAAIC,EAAsC,mBAAhBF,EAA6BA,EAAcF,EACjEK,EACsB,mBAAjBJ,EAA8BA,EAAeD,EAEtD,qBACKG,GACH5K,OAAQhE,EACN4O,EAAU5K,OACVsD,EACAmH,EAAGlP,EAAMqP,EAAU5K,OAAQsD,KAE7BnD,OAAQwK,EACJ3O,EACE4O,EAAUzK,OACVmD,EACAuH,EAAatP,EAAMqP,EAAUzK,OAAQmD,KAEvCsH,EAAUzK,OACdD,QAASwK,EACL1O,EACE4O,EAAU1K,QACVoD,EACAwH,EAAcvP,EAAMqP,EAAU1K,QAASoD,KAEzCsH,EAAU1K,WAGlB,WACMS,GACF0B,OAMRmI,OAAO,SAACvO,GACN,OAAAuO,EAAKO,iBACH,SAACpB,GAAiB,OAAKA,GAAS,YAAKlN,EAAUR,OAC/C,GACA,IAGJuO,aAAa,SAACvO,GAAe,OAAA,WAAM,OAAAuO,EAAKlC,KAAKrM,KAE7CuO,OAAO,SAACP,EAAgBC,GACtB,OAAAM,EAAKO,iBACH,SAACpB,GAAiB,OAAAK,EAAKL,EAAOM,EAAQC,KACtC,GACA,IAGJM,aAAa,SAACP,EAAgBC,GAAmB,OAAA,WAC/C,OAAAM,EAAKR,KAAKC,EAAQC,KAEpBM,OAAO,SAACZ,EAAcC,GACpB,OAAAW,EAAKO,iBAAiB,SAACpB,GAAiB,OAAAD,EAAKC,EAAOC,EAAMC,KAAK,GAAM,IAEvEW,aAAa,SAACZ,EAAcC,GAAe,OAAA,WAAM,OAAAW,EAAKd,KAAKE,EAAMC,KAEjEW,SAAS,SAAC/E,EAAexJ,GACvB,OAAAuO,EAAKO,iBACH,SAACpB,GAAiB,OAAAS,EAAOT,EAAOlE,EAAOxJ,IACvC,SAAC0N,GAAiB,OAAAS,EAAOT,EAAOlE,EAAO,OACvC,SAACkE,GAAiB,OAAAS,EAAOT,EAAOlE,EAAO,SAG3C+E,eAAe,SAAC/E,EAAexJ,GAAe,OAAA,WAAM,OAAAuO,EAAKJ,OAAO3E,EAAOxJ,KAEvEuO,UAAU,SAAC/E,EAAexJ,GACxB,OAAAuO,EAAKO,iBACH,SAACpB,GAAiB,OAAAU,EAAQV,EAAOlE,EAAOxJ,KACxC,GACA,IAGJuO,gBAAgB,SAAC/E,EAAexJ,GAAe,OAAA,WAC7C,OAAAuO,EAAKH,QAAQ5E,EAAOxJ,KAEtBuO,UAAU,SAACvO,GACT,IAAIH,GAAU,EAwBd,OAvBA0O,EAAKO,iBACH,SAACpB,GACC,IAAMqB,EAAMrB,GAAS1N,UAAU0N,GAAS,CAAC1N,GAIzC,OAHIH,EAAS,IACXA,EAASkP,EAAIlP,QAERkP,GAET,SAACrB,GACC,IAAMqB,EAAMrB,GAAS,aAASA,GAAS,CAAC,MAIxC,OAHI7N,EAAS,IACXA,EAASkP,EAAIlP,QAERkP,GAET,SAACrB,GACC,IAAMqB,EAAMrB,GAAS,aAASA,GAAS,CAAC,MAIxC,OAHI7N,EAAS,IACXA,EAASkP,EAAIlP,QAERkP,IAGJlP,GAGT0O,gBAAgB,SAACvO,GAAe,OAAA,WAAM,OAAAuO,EAAKS,QAAQhP,KAwBnDuO,eAAe,SAAC/E,GAAkB,OAAA,WAAM,OAAA+E,EAAKU,OAAYzF,KAqBzD+E,YAAY,WAAM,OAAA,WAAM,OAAAA,EAAKW,QAvK3BX,EAAKU,OAASV,EAAKU,OAAOE,KAAKZ,GAC/BA,EAAKW,IAAMX,EAAKW,IAAIC,KAAKZ,KAwN7B,OArO2Ca,iBAwIzCC,mBAAA,SAAU7F,GAER,IAAI5I,EAiBJ,OAhBA0O,KAAKR,iBAEH,SAACpB,GACC,IAAMG,EAAOH,EAAYA,UAAS,GAOlC,OANK9M,IACHA,EAASiN,EAAKrE,IAEZ3H,EAAWgM,EAAKC,SAClBD,EAAKC,OAAOtE,EAAO,GAEdqE,IAET,GACA,GAGKjN,GAKTyO,gBAAA,WAEE,IAAIzO,EAcJ,OAbA0O,KAAKR,iBAEH,SAACpB,GACC,IAAM6B,EAAM7B,EAIZ,OAHK9M,IACHA,EAAS2O,GAAOA,EAAIL,KAAOK,EAAIL,OAE1BK,IAET,GACA,GAGK3O,GAKTyO,mBAAA,WACE,IAAMG,EAA6B,CACjCnD,KAAMiD,KAAKjD,KACX6C,IAAKI,KAAKJ,IACVnB,KAAMuB,KAAKvB,KACXN,KAAM6B,KAAK7B,KACXU,OAAQmB,KAAKnB,OACbC,QAASkB,KAAKlB,QACdY,QAASM,KAAKN,QACdC,OAAQK,KAAKL,OACbQ,WAAYH,KAAKG,WACjBC,UAAWJ,KAAKI,UAChBC,WAAYL,KAAKK,WACjBC,WAAYN,KAAKM,WACjBC,aAAcP,KAAKO,aACnBC,cAAeR,KAAKQ,cACpBC,cAAeT,KAAKS,cACpBC,aAAcV,KAAKU,cAGf9O,aACJ8J,cACAC,WACA3I,aACA+E,SACA5C,WAGEwL,8CAIE/K,gBACDsK,GACH5C,KAAMqD,EACN5I,SAGF,OAAO2D,EACHE,gBAAoBF,EAAkB9F,GACtC+F,EACGA,EAAe/F,GAChB5C,EACsB,mBAAbA,EACJA,EAAiB4C,GACjB7C,EAAgBC,GAA4C,KAAhCC,WAAe4I,KAAK7I,GACnD,MA/NH+M,eAAe,CACpB3K,kBAAkB,MALqBwL,cCrC9BC,EAAelD,cArC5B,4DAmCA,OAnC+BmC,iBAG7BgB,kCAAA,SACElL,GAEA,OACE5F,EAAMgQ,KAAKpK,MAAMsH,OAAOtI,OAAQoL,KAAKpK,MAAMmC,QACzC/H,EAAM4F,EAAMsH,OAAOtI,OAAQoL,KAAKpK,MAAMmC,OACxC/H,EAAMgQ,KAAKpK,MAAMsH,OAAOvI,QAASqL,KAAKpK,MAAMmC,QAC1C/H,EAAM4F,EAAMsH,OAAOvI,QAASqL,KAAKpK,MAAMmC,OACzClG,OAAOC,KAAKkO,KAAKpK,OAAOrF,SAAWsB,OAAOC,KAAK8D,GAAOrF,QAQ1DuQ,mBAAA,WACE,IAAIlP,aAAE8J,cAAWwB,WAAQvB,WAAQ3I,aAAU+E,SAAMpC,gEAE3CoL,EAAQ/Q,EAAMkN,EAAOvI,QAASoD,GAC9BnE,EAAQ5D,EAAMkN,EAAOtI,OAAQmD,GAEnC,OAASgJ,GAAWnN,EAChB+H,EACEpJ,EAAWoJ,GAAUA,EAAO/H,GAAS,KACrCZ,EACET,EAAWS,GAAYA,EAASY,GAAS,KACzC8H,EACEE,gBAAoBF,EAAW/F,EAAa/B,GAC5CA,EACN,SAjCuBgN,mIJuDK7I,EAAcvD,GAChD,IAAM0I,EAAS/I,IAOf,OALAgJ,EACED,EACA,8GAGKA,EAAO7B,cAAmBtD,EAAMvD,mFKYvC5C,GACA,IAAAuD,qBAAA6L,uHAaAC,mCAKA,OAAO,SACLC,GAEA,IAAMpD,EACJoD,EAAUnD,aACVmD,EAAUnJ,MACTmJ,EAAUlD,aAAekD,EAAUlD,YAAYjG,MAChD,0BAKF,aAAA,qDAGEkH,WAAW,SAACxK,GACV,OAAOwM,EAAOrI,SAAUnE,EAAQwK,EAAKrJ,QAGvCqJ,mBAAmB,WACjB,OAAO1M,EAAW0O,EAAOhI,kBACrBgI,EAAOhI,iBAAkBgG,EAAKrJ,OAC9BqL,EAAOhI,kBAGbgG,eAAe,SAACxK,EAAgB0M,GAC9B,OAAOF,EAAOhG,aAAaxG,gBACtB0M,GACHvL,MAAOqJ,EAAKrJ,UAOhBqJ,sBAAsB,SAACmC,GACrB,OAAOxF,gBAACsF,gBAAcjC,EAAKrJ,MAAWwL,OAoB1C,OA5CgBtB,iBA2BdjC,mBAAA,WACE,IAAMjM,aAAYgE,2BAClB,OACEgG,gBAACJ,gBACK5F,EACAqL,GACJrI,SAAUqI,EAAOrI,UAAYoH,KAAKpH,SAClCK,iBAAkBgI,EAAOhI,kBAAoB+G,KAAK/G,iBAClDpD,cAAemL,EAAiBhB,KAAKpK,OACrCyL,cACEJ,EAAOK,kBAAoBL,EAAOK,iBAAiBtB,KAAKpK,OAE1D2E,SAAUyF,KAAK/E,aACfU,OAAQqE,KAAKuB,wBAvCZ1D,cAAc,cAAcC,SADrB8C,aA8ChB,OAAO1C,EAGLL,EAAGqD,wPRlDY,SAACjR,GAAsB,OAAAA,GAAQA,mFAqBnBuR,GAE/B,QAAmB,KADnBA,EAAMA,IAA4B,oBAAbC,SAA2BA,cAAWjR,IAEzD,OAAO,KAET,IACE,OAAOgR,EAAIE,eAAiBF,EAAIG,KAChC,MAAO9J,GACP,OAAO2J,EAAIG"}