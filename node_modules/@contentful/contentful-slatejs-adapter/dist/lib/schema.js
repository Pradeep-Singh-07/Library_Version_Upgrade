import { BLOCKS, TEXT_CONTAINERS } from '@contentful/rich-text-types';
var defaultSchema = {};
/**
 * Creates an instance of Schema from json.
 *
 * @export
 * @param {SchemaJSON} [schema=defaultSchema]
 * @returns {Schema}
 */
export function fromJSON(schema) {
    if (schema === void 0) { schema = defaultSchema; }
    return {
        /**
         * Check if a `node` is void based on the schema rules.
         *
         * @param {ContentfulElementNode} node
         * @returns
         */
        isVoid: function (node) {
            var _a, _b, _c;
            var root = Object.values(BLOCKS).includes(node.nodeType) ? 'blocks' : 'inlines';
            // tslint:disable-next-line
            return (_c = (_b = (_a = schema === null || schema === void 0 ? void 0 : schema[root]) === null || _a === void 0 ? void 0 : _a[node.nodeType]) === null || _b === void 0 ? void 0 : _b['isVoid']) !== null && _c !== void 0 ? _c : false;
        },
        isTextContainer: function (nodeType) {
            return TEXT_CONTAINERS.includes(nodeType);
        },
    };
}
//# sourceMappingURL=schema.js.map