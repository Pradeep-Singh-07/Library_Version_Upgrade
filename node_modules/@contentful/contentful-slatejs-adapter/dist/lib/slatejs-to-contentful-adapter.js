var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { getDataOrDefault } from './helpers';
import { fromJSON } from './schema';
import * as Contentful from '@contentful/rich-text-types';
export default function toContentfulDocument(_a) {
    var document = _a.document, schema = _a.schema;
    // TODO:
    // We allow adding data to the root document node, but Slate >v0.5.0
    // has no concept of a root document node. We should determine whether
    // this will be a compatibility problem for existing users.
    return {
        nodeType: Contentful.BLOCKS.DOCUMENT,
        data: {},
        content: document.flatMap(function (node) { return convertNode(node, fromJSON(schema)); }),
    };
}
function convertNode(node, schema) {
    var nodes = [];
    if (isSlateElement(node)) {
        var contentfulElement = {
            nodeType: node.type,
            data: getDataOrDefault(node.data),
            content: [],
        };
        if (!schema.isVoid(contentfulElement)) {
            contentfulElement.content = node.children.flatMap(function (childNode) {
                return convertNode(childNode, schema);
            });
        }
        if (contentfulElement.content.length === 0 && schema.isTextContainer(node.type)) {
            contentfulElement.content.push(convertText({ text: '', data: {} }));
        }
        nodes.push(contentfulElement);
    }
    else {
        var contentfulText = convertText(node);
        nodes.push(contentfulText);
    }
    return nodes;
}
function convertText(node) {
    var text = node.text, data = node.data, marks = __rest(node, ["text", "data"]);
    return {
        nodeType: 'text',
        value: node.text,
        marks: getMarkList(marks),
        data: getDataOrDefault(node.data),
    };
}
function getMarkList(marks) {
    var contentfulMarks = [];
    for (var _i = 0, _a = Object.keys(marks); _i < _a.length; _i++) {
        var mark = _a[_i];
        contentfulMarks.push({ type: mark });
    }
    return contentfulMarks;
}
function isSlateElement(node) {
    return 'type' in node;
}
//# sourceMappingURL=slatejs-to-contentful-adapter.js.map