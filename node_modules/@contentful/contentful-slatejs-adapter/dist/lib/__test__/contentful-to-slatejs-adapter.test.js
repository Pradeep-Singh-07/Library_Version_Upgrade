var _a;
import toSlatejsDocument from '../contentful-to-slatejs-adapter';
import toContentfulDocument from '../slatejs-to-contentful-adapter';
import * as contentful from './contentful-helpers';
import * as Contentful from '@contentful/rich-text-types';
var schema = { blocks: (_a = {}, _a[Contentful.BLOCKS.EMBEDDED_ENTRY] = { isVoid: true }, _a) };
describe('both adapters (roundtrippable cases)', function () {
    var testAdapters = function (message, contentfulDoc, slateDoc) {
        describe('toSlatejsDocument()', function () {
            it(message, function () {
                var actualSlateDoc = toSlatejsDocument({
                    document: contentfulDoc,
                    schema: schema,
                });
                expect(actualSlateDoc).toEqual(slateDoc);
            });
            it('converts Contentful mentions to Slate mentions', function () {
                var contentfulInput = {
                    content: [
                        {
                            content: [
                                { data: {}, marks: [], nodeType: 'text', value: 'Hello ' },
                                {
                                    content: [{ data: {}, marks: [], nodeType: 'text', value: '' }],
                                    data: { target: { sys: { id: 'user-id-0', linkType: 'User', type: 'Link' } } },
                                    nodeType: 'mention',
                                },
                                { data: {}, marks: [], nodeType: 'text', value: '' },
                            ],
                            data: {},
                            nodeType: 'paragraph',
                        },
                    ],
                    data: {},
                    nodeType: 'document',
                };
                var slateOutput = toSlatejsDocument({
                    document: contentfulInput,
                });
                var expectedSlateOutput = [
                    {
                        type: 'paragraph',
                        isVoid: false,
                        data: {},
                        children: [
                            {
                                data: {},
                                text: 'Hello ',
                            },
                            {
                                type: 'mention',
                                isVoid: false,
                                data: {
                                    target: {
                                        sys: {
                                            type: 'Link',
                                            linkType: 'User',
                                            id: 'user-id-0',
                                        },
                                    },
                                },
                                children: [
                                    {
                                        data: {},
                                        text: '',
                                    },
                                ],
                            },
                            {
                                data: {},
                                text: '',
                            },
                        ],
                    },
                ];
                expect(slateOutput).toStrictEqual(expectedSlateOutput);
            });
        });
        describe('toContentfulDocument()', function () {
            it(message, function () {
                var actualContentfulDoc = toContentfulDocument({
                    document: slateDoc,
                    schema: schema,
                });
                expect(actualContentfulDoc).toEqual(contentfulDoc);
            });
            it('is converts Slate mentions to Contentful mentions', function () {
                var slateFormatWithMention = [
                    {
                        type: 'paragraph',
                        data: {},
                        children: [
                            {
                                text: 'Hello ',
                            },
                            {
                                type: 'mention',
                                data: {
                                    target: {
                                        sys: {
                                            type: 'Link',
                                            linkType: 'User',
                                            id: 'user-id-0',
                                        },
                                    },
                                },
                                children: [
                                    {
                                        text: '',
                                    },
                                ],
                            },
                            {
                                text: '',
                            },
                        ],
                    },
                ];
                var resultContentfulDoc = toContentfulDocument({
                    document: slateFormatWithMention,
                    schema: schema,
                });
                var expectedContentfulDoc = {
                    content: [
                        {
                            content: [
                                { data: {}, marks: [], nodeType: 'text', value: 'Hello ' },
                                {
                                    content: [{ data: {}, marks: [], nodeType: 'text', value: '' }],
                                    data: { target: { sys: { id: 'user-id-0', linkType: 'User', type: 'Link' } } },
                                    nodeType: 'mention',
                                },
                                { data: {}, marks: [], nodeType: 'text', value: '' },
                            ],
                            data: {},
                            nodeType: 'paragraph',
                        },
                    ],
                    data: {},
                    nodeType: 'document',
                };
                expect(resultContentfulDoc).toEqual(expectedContentfulDoc);
            });
            it('converts text-only nodes', function () {
                var slateText = [
                    {
                        type: 'paragraph',
                        data: {},
                        children: [
                            {
                                text: 'Hello ',
                            },
                        ],
                    },
                ];
                var convertedToContentful = toContentfulDocument({
                    document: slateText,
                });
                var expectedContentfulDoc = {
                    content: [
                        {
                            content: [{ data: {}, marks: [], nodeType: 'text', value: 'Hello ' }],
                            data: {},
                            nodeType: 'paragraph',
                        },
                    ],
                    data: {},
                    nodeType: 'document',
                };
                expect(convertedToContentful).toStrictEqual(expectedContentfulDoc);
            });
        });
    };
    describe('document', function () {
        testAdapters('empty document', contentful.document(), []);
        testAdapters('document with block', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text(''))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [
                    {
                        text: '',
                        data: {},
                    },
                ],
            },
        ]);
        testAdapters('paragraph with inline', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.inline(Contentful.INLINES.HYPERLINK))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [
                    {
                        type: Contentful.INLINES.HYPERLINK,
                        data: {},
                        isVoid: false,
                        children: [],
                    },
                ],
            },
        ]);
        testAdapters('paragraph with text', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text('hi'))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [{ text: 'hi', data: {} }],
            },
        ]);
        testAdapters('text with marks', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text('this'), contentful.text('is', contentful.mark('bold')))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [
                    { text: 'this', data: {} },
                    { text: 'is', data: {}, bold: true },
                ],
            },
        ]);
        it('adds a default value to marks if undefined', function () {
            var slateDoc = [
                {
                    type: Contentful.BLOCKS.PARAGRAPH,
                    data: {},
                    isVoid: false,
                    children: [{ text: 'Hi', data: {} }],
                },
            ];
            var ctflDoc = toContentfulDocument({
                document: slateDoc,
            });
            expect(ctflDoc).toEqual(contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, {
                nodeType: 'text',
                marks: [],
                data: {},
                value: 'Hi',
            })));
        });
        testAdapters('text with multiple marks', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text('this'), contentful.text('is', contentful.mark('bold')), contentful.text('huge', contentful.mark('bold'), contentful.mark('italic')))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [
                    { text: 'this', data: {} },
                    { text: 'is', data: {}, bold: true },
                    { text: 'huge', data: {}, bold: true, italic: true },
                ],
            },
        ]);
        testAdapters('document with nested blocks', contentful.document(contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text('this is a test', contentful.mark('bold')), contentful.text('paragraph', contentful.mark('underline'))), contentful.block(Contentful.BLOCKS.QUOTE, contentful.block(Contentful.BLOCKS.PARAGRAPH, contentful.text('this is it')))), [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [
                    { text: 'this is a test', data: {}, bold: true },
                    { text: 'paragraph', data: {}, underline: true },
                ],
            },
            {
                type: Contentful.BLOCKS.QUOTE,
                data: {},
                isVoid: false,
                children: [
                    {
                        type: Contentful.BLOCKS.PARAGRAPH,
                        data: {},
                        isVoid: false,
                        children: [{ text: 'this is it', data: {} }],
                    },
                ],
            },
        ]);
    });
    describe('converts additional data', function () {
        testAdapters('data in block', {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    content: [
                        {
                            nodeType: 'text',
                            marks: [],
                            data: {},
                            value: '',
                        },
                    ],
                    data: { a: 1 },
                },
            ],
        }, [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: { a: 1 },
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
        ]);
        testAdapters('data in inline', {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    data: { a: 1 },
                    content: [
                        {
                            nodeType: Contentful.INLINES.HYPERLINK,
                            data: { a: 2 },
                            content: [],
                        },
                    ],
                },
            ],
        }, [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: { a: 1 },
                isVoid: false,
                children: [
                    {
                        type: Contentful.INLINES.HYPERLINK,
                        data: { a: 2 },
                        isVoid: false,
                        children: [],
                    },
                ],
            },
        ]);
        testAdapters('data in text', {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    data: { a: 1 },
                    content: [
                        {
                            nodeType: Contentful.INLINES.HYPERLINK,
                            data: { a: 2 },
                            content: [
                                {
                                    nodeType: 'text',
                                    marks: [],
                                    data: { a: 3 },
                                    value: 'YO',
                                },
                            ],
                        },
                    ],
                },
            ],
        }, [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: { a: 1 },
                isVoid: false,
                children: [
                    {
                        type: Contentful.INLINES.HYPERLINK,
                        data: { a: 2 },
                        isVoid: false,
                        children: [
                            {
                                text: 'YO',
                                data: { a: 3 },
                            },
                        ],
                    },
                ],
            },
        ]);
    });
    describe('sets isVoid from schema', function () {
        testAdapters('data in block', {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.EMBEDDED_ENTRY,
                    content: [],
                    data: { a: 1 },
                },
            ],
        }, [
            {
                type: Contentful.BLOCKS.EMBEDDED_ENTRY,
                data: { a: 1 },
                isVoid: true,
                children: [],
            },
        ]);
        test('removes empty text nodes from void nodes content', function () {
            var contentfulDoc = {
                nodeType: Contentful.BLOCKS.DOCUMENT,
                data: {},
                content: [
                    {
                        nodeType: Contentful.BLOCKS.EMBEDDED_ENTRY,
                        content: [],
                        data: { a: 1 },
                    },
                ],
            };
            var slateDoc = [
                {
                    type: Contentful.BLOCKS.EMBEDDED_ENTRY,
                    data: { a: 1 },
                    isVoid: true,
                    children: [{ text: '', data: {} }],
                },
            ];
            var actualContentfulDoc = toContentfulDocument({
                document: slateDoc,
                schema: schema,
            });
            expect(actualContentfulDoc).toEqual(contentfulDoc);
        });
    });
});
describe('toSlatejsDocument() adapter (non-roundtrippable cases)', function () {
    // `content` for any TEXT_CONTAINER contentful node could be empty according to our
    // validation rules, but SlateJS could crash if there isn't a text leaf.
    it('inserts empty text nodes into text container blocks with empty `content`', function () {
        var cfDoc = {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    content: [],
                    data: {},
                },
                {
                    nodeType: Contentful.BLOCKS.HEADING_1,
                    content: [],
                    data: {},
                },
                {
                    nodeType: Contentful.BLOCKS.HEADING_6,
                    content: [],
                    data: { a: 42 },
                },
            ],
        };
        var expectedSlateDoc = [
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
            {
                type: Contentful.BLOCKS.HEADING_1,
                data: {},
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
            {
                type: Contentful.BLOCKS.HEADING_6,
                data: { a: 42 },
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
        ];
        var actualSlateDoc = toSlatejsDocument({
            document: cfDoc,
            schema: schema,
        });
        expect(actualSlateDoc).toEqual(expectedSlateDoc);
    });
});
describe('toContentfulDocument()}; adapter (non-roundtrippable cases)', function () {
    it('neither inserts nor removes empty text nodes on container blocks with empty `children`', function () {
        var slateDoc = [
            {
                type: Contentful.BLOCKS.HEADING_1,
                data: {},
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [{ text: '', data: {} }],
            },
            {
                type: Contentful.BLOCKS.PARAGRAPH,
                data: {},
                isVoid: false,
                children: [],
            },
            {
                type: Contentful.BLOCKS.HEADING_2,
                data: {},
                isVoid: false,
                children: [],
            },
        ];
        var expectedCfDoc = {
            nodeType: Contentful.BLOCKS.DOCUMENT,
            data: {},
            content: [
                {
                    nodeType: Contentful.BLOCKS.HEADING_1,
                    content: [
                        {
                            nodeType: 'text',
                            marks: [],
                            data: {},
                            value: '',
                        },
                    ],
                    data: {},
                },
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    content: [
                        {
                            nodeType: 'text',
                            marks: [],
                            data: {},
                            value: '',
                        },
                    ],
                    data: {},
                },
                {
                    nodeType: Contentful.BLOCKS.PARAGRAPH,
                    content: [
                        {
                            nodeType: 'text',
                            marks: [],
                            data: {},
                            value: '',
                        },
                    ],
                    data: {},
                },
                {
                    nodeType: Contentful.BLOCKS.HEADING_2,
                    content: [
                        {
                            nodeType: 'text',
                            marks: [],
                            data: {},
                            value: '',
                        },
                    ],
                    data: {},
                },
            ],
        };
        var actualCfDoc = toContentfulDocument({
            document: slateDoc,
            schema: schema,
        });
        expect(actualCfDoc).toEqual(expectedCfDoc);
    });
});
//# sourceMappingURL=contentful-to-slatejs-adapter.test.js.map