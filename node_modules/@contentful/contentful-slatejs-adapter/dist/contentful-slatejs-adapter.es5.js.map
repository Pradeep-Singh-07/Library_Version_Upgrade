{"version":3,"file":"contentful-slatejs-adapter.es5.js","sources":["../src/helpers.ts","../src/schema.ts","../src/contentful-to-slatejs-adapter.ts","../src/slatejs-to-contentful-adapter.ts"],"sourcesContent":["/**\n * Ensures that data defaults to an empty object.\n */\nexport const getDataOrDefault = (value?: Record<string, any>) => value || {};\n","import { BLOCKS, TEXT_CONTAINERS } from '@contentful/rich-text-types';\nimport { ContentfulElementNode } from './types';\n\nconst defaultSchema: SchemaJSON = {};\n\n// TODO: Get rid of outdated SlateJS schema concept here and instead construct\n//  a `Schema` object based on `rich-text-types` constants. The original idea\n//  was to decouple code from these constants for future extensibility cases\n//  where we had to deal with custom node types that wouldn't be part of these\n//  constants while a custom (forked) rich-text editor provided `Schema`\n//  instance would be aware of them.\n/**\n * SlateJS Schema definition v0.33.x\n *\n * @export\n * @interface SchemaJSON\n */\nexport interface SchemaJSON {\n  blocks?: Record<string, SchemaValue>;\n  inlines?: Record<string, SchemaValue>;\n}\n// TODO: No need to extend `SchemaJSON` and change `isVoid` to take a `nodeType: string`\nexport interface Schema extends SchemaJSON {\n  isVoid(node: ContentfulElementNode): boolean;\n  isTextContainer(nodeType: string): boolean;\n}\n\nexport interface SchemaValue {\n  isVoid?: boolean;\n  [k: string]: any;\n}\n\n/**\n * Creates an instance of Schema from json.\n *\n * @export\n * @param {SchemaJSON} [schema=defaultSchema]\n * @returns {Schema}\n */\nexport function fromJSON(schema: SchemaJSON = defaultSchema): Schema {\n  return {\n    /**\n     * Check if a `node` is void based on the schema rules.\n     *\n     * @param {ContentfulElementNode} node\n     * @returns\n     */\n    isVoid(node: ContentfulElementNode) {\n      const root = Object.values(BLOCKS).includes(node.nodeType as any) ? 'blocks' : 'inlines';\n      // tslint:disable-next-line\n      return schema?.[root]?.[node.nodeType]?.['isVoid'] ?? false;\n    },\n    isTextContainer(nodeType: string) {\n      return TEXT_CONTAINERS.includes(nodeType as any);\n    },\n  };\n}\n","import { getDataOrDefault } from './helpers';\n\nimport { fromJSON, Schema, SchemaJSON } from './schema';\nimport * as Contentful from '@contentful/rich-text-types';\nimport {\n  ContentfulNode,\n  ContentfulElementNode,\n  SlateNode,\n  SlateElement,\n  SlateText,\n  SlateMarks,\n} from './types';\n\nexport interface ToSlatejsDocumentProperties {\n  document: Contentful.Document;\n  schema?: SchemaJSON;\n}\n\nexport default function toSlatejsDocument({\n  document,\n  schema,\n}: ToSlatejsDocumentProperties): SlateNode[] {\n  // TODO:\n  // We allow adding data to the root document node, but Slate >v0.5.0\n  // has no concept of a root document node. We should determine whether\n  // this will be a compatibility problem for existing users.\n  return document.content.flatMap((node) => convertNode(node, fromJSON(schema)));\n}\n\nfunction convertNode(node: ContentfulNode, schema: Schema): SlateNode {\n  if (node.nodeType === 'text') {\n    return convertTextNode(node as Contentful.Text);\n  } else {\n    const contentfulNode = node as ContentfulElementNode;\n    const childNodes = contentfulNode.content.flatMap((childNode) =>\n      convertNode(childNode, schema),\n    );\n    const slateNode = convertElementNode(contentfulNode, childNodes, schema);\n    return slateNode;\n  }\n}\n\nfunction convertElementNode(\n  contentfulBlock: ContentfulElementNode,\n  slateChildren: SlateNode[],\n  schema: Schema,\n): SlateElement {\n  const children =\n    slateChildren.length === 0 && schema.isTextContainer(contentfulBlock.nodeType)\n      ? [{ text: '', data: {} }]\n      : slateChildren;\n  return {\n    type: contentfulBlock.nodeType,\n    children,\n    isVoid: schema.isVoid(contentfulBlock),\n    data: getDataOrDefault(contentfulBlock.data),\n  };\n}\n\nfunction convertTextNode(node: Contentful.Text): SlateText {\n  return {\n    text: node.value,\n    data: getDataOrDefault(node.data),\n    ...convertTextMarks(node),\n  };\n}\n\nfunction convertTextMarks(node: Contentful.Text): SlateMarks {\n  const marks: SlateMarks = {};\n  for (const mark of node.marks) {\n    marks[mark.type as keyof SlateMarks] = true;\n  }\n  return marks;\n}\n","import { getDataOrDefault } from './helpers';\nimport { SchemaJSON, Schema, fromJSON } from './schema';\n\nimport * as Contentful from '@contentful/rich-text-types';\nimport {\n  ContentfulNode,\n  ContentfulElementNode,\n  SlateNode,\n  SlateElement,\n  SlateText,\n  SlateMarks,\n} from './types';\n\nexport interface ToContentfulDocumentProperties {\n  document: SlateNode[];\n  schema?: SchemaJSON;\n}\n\nexport default function toContentfulDocument({\n  document,\n  schema,\n}: ToContentfulDocumentProperties): Contentful.Document {\n  // TODO:\n  // We allow adding data to the root document node, but Slate >v0.5.0\n  // has no concept of a root document node. We should determine whether\n  // this will be a compatibility problem for existing users.\n  return {\n    nodeType: Contentful.BLOCKS.DOCUMENT,\n    data: {},\n    content: document.flatMap(\n      (node) => convertNode(node, fromJSON(schema)) as Contentful.TopLevelBlock[],\n    ),\n  };\n}\n\nfunction convertNode(node: SlateNode, schema: Schema): ContentfulNode[] {\n  const nodes: ContentfulNode[] = [];\n  if (isSlateElement(node)) {\n    const contentfulElement: ContentfulElementNode = {\n      nodeType: node.type as Contentful.BLOCKS,\n      data: getDataOrDefault(node.data),\n      content: [],\n    };\n    if (!schema.isVoid(contentfulElement)) {\n      contentfulElement.content = node.children.flatMap((childNode) =>\n        convertNode(childNode, schema),\n      );\n    }\n    if (contentfulElement.content.length === 0 && schema.isTextContainer(node.type)) {\n      contentfulElement.content.push(convertText({ text: '', data: {} }));\n    }\n    nodes.push(contentfulElement);\n  } else {\n    const contentfulText = convertText(node);\n    nodes.push(contentfulText);\n  }\n  return nodes;\n}\n\nfunction convertText(node: SlateText): Contentful.Text {\n  const { text, data, ...marks } = node;\n  return {\n    nodeType: 'text',\n    value: node.text,\n    marks: getMarkList(marks),\n    data: getDataOrDefault(node.data),\n  };\n}\n\nfunction getMarkList(marks: SlateMarks): Contentful.Mark[] {\n  const contentfulMarks: Contentful.Mark[] = [];\n  for (const mark of Object.keys(marks)) {\n    contentfulMarks.push({ type: mark });\n  }\n  return contentfulMarks;\n}\n\nfunction isSlateElement(node: SlateNode): node is SlateElement {\n  return 'type' in node;\n}\n"],"names":["BLOCKS","TEXT_CONTAINERS","convertNode","Contentful"],"mappings":"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"}