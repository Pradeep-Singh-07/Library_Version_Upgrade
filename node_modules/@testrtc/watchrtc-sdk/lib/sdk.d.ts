import { IEvent, IStatsCallback, IWatchRTCConfiguration, IWatchRTCInitServices, Rating, StateListener } from "./interfaces";
/**
 * Initialize SDK.
 * @param watchrtc
 * @param prefixesToWrap
 * @param services
 */
export declare const initSDK: (watchrtc: Omit<IWatchRTCConfiguration, "allowBrowserLogCollection">, prefixesToWrap: string[], services?: IWatchRTCInitServices | undefined) => void;
export declare const setConfig: (newWatchrtcConfig: Omit<IWatchRTCConfiguration, "collectionInterval" | "allowBrowserLogCollection">) => void;
/**
 * Set user rating and/or comment for peer session
 * @param rating number from 1 to 5
 * @param comment string
 */
export declare const setUserRating: (rating: Rating, ratingComment?: string | undefined) => Promise<{
    error?: string;
}>;
/**
 * Add keys for peer session
 * @param keys
 */
export declare const addKeys: (keys: any) => Promise<unknown> | undefined;
export declare const disableDataCollection: () => void;
export declare const enableDataCollection: () => void;
export declare const addEvent: (event: IEvent) => Promise<unknown> | undefined;
export declare const mapStream: (id: string, name: string) => void;
export declare const mapTrack: (id: string, name: string) => void;
export declare const connect: () => void;
export declare const disconnect: () => void;
export declare const registerOnStatsListener: (listener: IStatsCallback) => void;
export declare const registerStateListener: (listener: StateListener | null) => void;
export declare const persistentEnd: (nailUpCallEnd?: boolean | undefined) => void;
export declare const persistentStart: (roomId: string, peerId: string) => void;
